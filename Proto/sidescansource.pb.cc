// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidescansource.proto

#include "sidescansource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SideScanSource::SideScanSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.computer_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dt_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.horizontal_range_direction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.side_scan_image_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remarks_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_image_paths_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cruise_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.dt_speed_)*/0
  , /*decltype(_impl_.horizontal_range_value_)*/0
  , /*decltype(_impl_.height_from_bottom_)*/0
  , /*decltype(_impl_.r_theat_)*/0
  , /*decltype(_impl_.along_track_)*/0
  , /*decltype(_impl_.across_track_)*/0
  , /*decltype(_impl_.suppose_size_)*/0
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_.target_longitude_)*/0
  , /*decltype(_impl_.target_latitude_)*/0
  , /*decltype(_impl_.position_error_)*/0
  , /*decltype(_impl_.status_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SideScanSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideScanSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideScanSourceDefaultTypeInternal() {}
  union {
    SideScanSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideScanSourceDefaultTypeInternal _SideScanSource_default_instance_;
PROTOBUF_CONSTEXPR SideScanSourceList::SideScanSourceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SideScanSourceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideScanSourceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideScanSourceListDefaultTypeInternal() {}
  union {
    SideScanSourceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideScanSourceListDefaultTypeInternal _SideScanSourceList_default_instance_;
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_sidescansource_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sidescansource_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sidescansource_2eproto = nullptr;

const uint32_t TableStruct_sidescansource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.computer_time_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.dt_time_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.dt_speed_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.horizontal_range_direction_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.horizontal_range_value_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.height_from_bottom_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.r_theat_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.side_scan_image_name_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.along_track_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.across_track_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.remarks_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.suppose_size_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_image_paths_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_description_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.target_longitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.target_latitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.position_error_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.cruise_number_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.dive_number_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SideScanSourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SideScanSourceList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::StatusResponse, _impl_.message_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SideScanSource)},
  { 30, -1, -1, sizeof(::SideScanSourceList)},
  { 37, -1, -1, sizeof(::StatusResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SideScanSource_default_instance_._instance,
  &::_SideScanSourceList_default_instance_._instance,
  &::_StatusResponse_default_instance_._instance,
};

const char descriptor_table_protodef_sidescansource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024sidescansource.proto\"\254\004\n\016SideScanSourc"
  "e\022\n\n\002id\030\001 \001(\t\022\025\n\rcomputer_time\030\002 \001(\t\022\017\n\007"
  "dt_time\030\003 \001(\t\022\021\n\tlongitude\030\004 \001(\001\022\020\n\010lati"
  "tude\030\005 \001(\001\022\020\n\010dt_speed\030\006 \001(\002\022\"\n\032horizont"
  "al_range_direction\030\007 \001(\t\022\036\n\026horizontal_r"
  "ange_value\030\010 \001(\002\022\032\n\022height_from_bottom\030\t"
  " \001(\002\022\017\n\007r_theat\030\n \001(\002\022\034\n\024side_scan_image"
  "_name\030\013 \001(\t\022\023\n\013along_track\030\014 \001(\002\022\024\n\014acro"
  "ss_track\030\r \001(\002\022\017\n\007remarks\030\016 \001(\t\022\024\n\014suppo"
  "se_size\030\017 \001(\002\022\020\n\010priority\030\020 \001(\r\022\032\n\022verif"
  "y_image_paths\030\021 \001(\t\022\031\n\021image_description"
  "\030\022 \001(\t\022\030\n\020target_longitude\030\023 \001(\001\022\027\n\017targ"
  "et_latitude\030\024 \001(\001\022\026\n\016position_error\030\025 \001("
  "\002\022\025\n\rcruise_number\030\026 \001(\t\022\023\n\013dive_number\030"
  "\027 \001(\t\022\016\n\006status\030\030 \001(\r\"3\n\022SideScanSourceL"
  "ist\022\035\n\004list\030\001 \003(\0132\017.SideScanSource\"1\n\016St"
  "atusResponse\022\016\n\006status\030\001 \001(\010\022\017\n\007message\030"
  "\002 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sidescansource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sidescansource_2eproto = {
    false, false, 693, descriptor_table_protodef_sidescansource_2eproto,
    "sidescansource.proto",
    &descriptor_table_sidescansource_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_sidescansource_2eproto::offsets,
    file_level_metadata_sidescansource_2eproto, file_level_enum_descriptors_sidescansource_2eproto,
    file_level_service_descriptors_sidescansource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sidescansource_2eproto_getter() {
  return &descriptor_table_sidescansource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sidescansource_2eproto(&descriptor_table_sidescansource_2eproto);

// ===================================================================

class SideScanSource::_Internal {
 public:
};

SideScanSource::SideScanSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SideScanSource)
}
SideScanSource::SideScanSource(const SideScanSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SideScanSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.computer_time_){}
    , decltype(_impl_.dt_time_){}
    , decltype(_impl_.horizontal_range_direction_){}
    , decltype(_impl_.side_scan_image_name_){}
    , decltype(_impl_.remarks_){}
    , decltype(_impl_.verify_image_paths_){}
    , decltype(_impl_.image_description_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.dt_speed_){}
    , decltype(_impl_.horizontal_range_value_){}
    , decltype(_impl_.height_from_bottom_){}
    , decltype(_impl_.r_theat_){}
    , decltype(_impl_.along_track_){}
    , decltype(_impl_.across_track_){}
    , decltype(_impl_.suppose_size_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.target_longitude_){}
    , decltype(_impl_.target_latitude_){}
    , decltype(_impl_.position_error_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.computer_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computer_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_computer_time().empty()) {
    _this->_impl_.computer_time_.Set(from._internal_computer_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dt_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dt_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dt_time().empty()) {
    _this->_impl_.dt_time_.Set(from._internal_dt_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.horizontal_range_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_range_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_horizontal_range_direction().empty()) {
    _this->_impl_.horizontal_range_direction_.Set(from._internal_horizontal_range_direction(), 
      _this->GetArenaForAllocation());
  }
  _impl_.side_scan_image_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.side_scan_image_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_side_scan_image_name().empty()) {
    _this->_impl_.side_scan_image_name_.Set(from._internal_side_scan_image_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remarks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remarks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remarks().empty()) {
    _this->_impl_.remarks_.Set(from._internal_remarks(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_image_paths_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_image_paths_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_image_paths().empty()) {
    _this->_impl_.verify_image_paths_.Set(from._internal_verify_image_paths(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_description().empty()) {
    _this->_impl_.image_description_.Set(from._internal_image_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_number().empty()) {
    _this->_impl_.cruise_number_.Set(from._internal_cruise_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dive_number().empty()) {
    _this->_impl_.dive_number_.Set(from._internal_dive_number(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:SideScanSource)
}

inline void SideScanSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.computer_time_){}
    , decltype(_impl_.dt_time_){}
    , decltype(_impl_.horizontal_range_direction_){}
    , decltype(_impl_.side_scan_image_name_){}
    , decltype(_impl_.remarks_){}
    , decltype(_impl_.verify_image_paths_){}
    , decltype(_impl_.image_description_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.dt_speed_){0}
    , decltype(_impl_.horizontal_range_value_){0}
    , decltype(_impl_.height_from_bottom_){0}
    , decltype(_impl_.r_theat_){0}
    , decltype(_impl_.along_track_){0}
    , decltype(_impl_.across_track_){0}
    , decltype(_impl_.suppose_size_){0}
    , decltype(_impl_.priority_){0u}
    , decltype(_impl_.target_longitude_){0}
    , decltype(_impl_.target_latitude_){0}
    , decltype(_impl_.position_error_){0}
    , decltype(_impl_.status_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.computer_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.computer_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dt_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dt_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.horizontal_range_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_range_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.side_scan_image_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.side_scan_image_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remarks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remarks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_image_paths_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_image_paths_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SideScanSource::~SideScanSource() {
  // @@protoc_insertion_point(destructor:SideScanSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SideScanSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.computer_time_.Destroy();
  _impl_.dt_time_.Destroy();
  _impl_.horizontal_range_direction_.Destroy();
  _impl_.side_scan_image_name_.Destroy();
  _impl_.remarks_.Destroy();
  _impl_.verify_image_paths_.Destroy();
  _impl_.image_description_.Destroy();
  _impl_.cruise_number_.Destroy();
  _impl_.dive_number_.Destroy();
}

void SideScanSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SideScanSource::Clear() {
// @@protoc_insertion_point(message_clear_start:SideScanSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.computer_time_.ClearToEmpty();
  _impl_.dt_time_.ClearToEmpty();
  _impl_.horizontal_range_direction_.ClearToEmpty();
  _impl_.side_scan_image_name_.ClearToEmpty();
  _impl_.remarks_.ClearToEmpty();
  _impl_.verify_image_paths_.ClearToEmpty();
  _impl_.image_description_.ClearToEmpty();
  _impl_.cruise_number_.ClearToEmpty();
  _impl_.dive_number_.ClearToEmpty();
  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideScanSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.id"));
        } else
          goto handle_unusual;
        continue;
      // string computer_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_computer_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.computer_time"));
        } else
          goto handle_unusual;
        continue;
      // string dt_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dt_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.dt_time"));
        } else
          goto handle_unusual;
        continue;
      // double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float dt_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.dt_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string horizontal_range_direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_horizontal_range_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.horizontal_range_direction"));
        } else
          goto handle_unusual;
        continue;
      // float horizontal_range_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.horizontal_range_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height_from_bottom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.height_from_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float r_theat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.r_theat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string side_scan_image_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_side_scan_image_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.side_scan_image_name"));
        } else
          goto handle_unusual;
        continue;
      // float along_track = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _impl_.along_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float across_track = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.across_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string remarks = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_remarks();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.remarks"));
        } else
          goto handle_unusual;
        continue;
      // float suppose_size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _impl_.suppose_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verify_image_paths = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_verify_image_paths();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.verify_image_paths"));
        } else
          goto handle_unusual;
        continue;
      // string image_description = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_image_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.image_description"));
        } else
          goto handle_unusual;
        continue;
      // double target_longitude = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.target_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double target_latitude = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 161)) {
          _impl_.target_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float position_error = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.position_error_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string cruise_number = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_cruise_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.cruise_number"));
        } else
          goto handle_unusual;
        continue;
      // string dive_number = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.dive_number"));
        } else
          goto handle_unusual;
        continue;
      // uint32 status = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideScanSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SideScanSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string computer_time = 2;
  if (!this->_internal_computer_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_computer_time().data(), static_cast<int>(this->_internal_computer_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.computer_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_computer_time(), target);
  }

  // string dt_time = 3;
  if (!this->_internal_dt_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dt_time().data(), static_cast<int>(this->_internal_dt_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.dt_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dt_time(), target);
  }

  // double longitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // double latitude = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_latitude(), target);
  }

  // float dt_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dt_speed = this->_internal_dt_speed();
  uint32_t raw_dt_speed;
  memcpy(&raw_dt_speed, &tmp_dt_speed, sizeof(tmp_dt_speed));
  if (raw_dt_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_dt_speed(), target);
  }

  // string horizontal_range_direction = 7;
  if (!this->_internal_horizontal_range_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_horizontal_range_direction().data(), static_cast<int>(this->_internal_horizontal_range_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.horizontal_range_direction");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_horizontal_range_direction(), target);
  }

  // float horizontal_range_value = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal_range_value = this->_internal_horizontal_range_value();
  uint32_t raw_horizontal_range_value;
  memcpy(&raw_horizontal_range_value, &tmp_horizontal_range_value, sizeof(tmp_horizontal_range_value));
  if (raw_horizontal_range_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_horizontal_range_value(), target);
  }

  // float height_from_bottom = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height_from_bottom = this->_internal_height_from_bottom();
  uint32_t raw_height_from_bottom;
  memcpy(&raw_height_from_bottom, &tmp_height_from_bottom, sizeof(tmp_height_from_bottom));
  if (raw_height_from_bottom != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_height_from_bottom(), target);
  }

  // float r_theat = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r_theat = this->_internal_r_theat();
  uint32_t raw_r_theat;
  memcpy(&raw_r_theat, &tmp_r_theat, sizeof(tmp_r_theat));
  if (raw_r_theat != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_r_theat(), target);
  }

  // string side_scan_image_name = 11;
  if (!this->_internal_side_scan_image_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_side_scan_image_name().data(), static_cast<int>(this->_internal_side_scan_image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.side_scan_image_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_side_scan_image_name(), target);
  }

  // float along_track = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_along_track = this->_internal_along_track();
  uint32_t raw_along_track;
  memcpy(&raw_along_track, &tmp_along_track, sizeof(tmp_along_track));
  if (raw_along_track != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_along_track(), target);
  }

  // float across_track = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_across_track = this->_internal_across_track();
  uint32_t raw_across_track;
  memcpy(&raw_across_track, &tmp_across_track, sizeof(tmp_across_track));
  if (raw_across_track != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_across_track(), target);
  }

  // string remarks = 14;
  if (!this->_internal_remarks().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remarks().data(), static_cast<int>(this->_internal_remarks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.remarks");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_remarks(), target);
  }

  // float suppose_size = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_suppose_size = this->_internal_suppose_size();
  uint32_t raw_suppose_size;
  memcpy(&raw_suppose_size, &tmp_suppose_size, sizeof(tmp_suppose_size));
  if (raw_suppose_size != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_suppose_size(), target);
  }

  // uint32 priority = 16;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_priority(), target);
  }

  // string verify_image_paths = 17;
  if (!this->_internal_verify_image_paths().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_image_paths().data(), static_cast<int>(this->_internal_verify_image_paths().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.verify_image_paths");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_verify_image_paths(), target);
  }

  // string image_description = 18;
  if (!this->_internal_image_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_description().data(), static_cast<int>(this->_internal_image_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.image_description");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_image_description(), target);
  }

  // double target_longitude = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_target_longitude = this->_internal_target_longitude();
  uint64_t raw_target_longitude;
  memcpy(&raw_target_longitude, &tmp_target_longitude, sizeof(tmp_target_longitude));
  if (raw_target_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_target_longitude(), target);
  }

  // double target_latitude = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_target_latitude = this->_internal_target_latitude();
  uint64_t raw_target_latitude;
  memcpy(&raw_target_latitude, &tmp_target_latitude, sizeof(tmp_target_latitude));
  if (raw_target_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(20, this->_internal_target_latitude(), target);
  }

  // float position_error = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_error = this->_internal_position_error();
  uint32_t raw_position_error;
  memcpy(&raw_position_error, &tmp_position_error, sizeof(tmp_position_error));
  if (raw_position_error != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_position_error(), target);
  }

  // string cruise_number = 22;
  if (!this->_internal_cruise_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_number().data(), static_cast<int>(this->_internal_cruise_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.cruise_number");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_cruise_number(), target);
  }

  // string dive_number = 23;
  if (!this->_internal_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dive_number().data(), static_cast<int>(this->_internal_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.dive_number");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_dive_number(), target);
  }

  // uint32 status = 24;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SideScanSource)
  return target;
}

size_t SideScanSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SideScanSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string computer_time = 2;
  if (!this->_internal_computer_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_computer_time());
  }

  // string dt_time = 3;
  if (!this->_internal_dt_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dt_time());
  }

  // string horizontal_range_direction = 7;
  if (!this->_internal_horizontal_range_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_horizontal_range_direction());
  }

  // string side_scan_image_name = 11;
  if (!this->_internal_side_scan_image_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side_scan_image_name());
  }

  // string remarks = 14;
  if (!this->_internal_remarks().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remarks());
  }

  // string verify_image_paths = 17;
  if (!this->_internal_verify_image_paths().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_image_paths());
  }

  // string image_description = 18;
  if (!this->_internal_image_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_description());
  }

  // string cruise_number = 22;
  if (!this->_internal_cruise_number().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_number());
  }

  // string dive_number = 23;
  if (!this->_internal_dive_number().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dive_number());
  }

  // double longitude = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // float dt_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dt_speed = this->_internal_dt_speed();
  uint32_t raw_dt_speed;
  memcpy(&raw_dt_speed, &tmp_dt_speed, sizeof(tmp_dt_speed));
  if (raw_dt_speed != 0) {
    total_size += 1 + 4;
  }

  // float horizontal_range_value = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal_range_value = this->_internal_horizontal_range_value();
  uint32_t raw_horizontal_range_value;
  memcpy(&raw_horizontal_range_value, &tmp_horizontal_range_value, sizeof(tmp_horizontal_range_value));
  if (raw_horizontal_range_value != 0) {
    total_size += 1 + 4;
  }

  // float height_from_bottom = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height_from_bottom = this->_internal_height_from_bottom();
  uint32_t raw_height_from_bottom;
  memcpy(&raw_height_from_bottom, &tmp_height_from_bottom, sizeof(tmp_height_from_bottom));
  if (raw_height_from_bottom != 0) {
    total_size += 1 + 4;
  }

  // float r_theat = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r_theat = this->_internal_r_theat();
  uint32_t raw_r_theat;
  memcpy(&raw_r_theat, &tmp_r_theat, sizeof(tmp_r_theat));
  if (raw_r_theat != 0) {
    total_size += 1 + 4;
  }

  // float along_track = 12;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_along_track = this->_internal_along_track();
  uint32_t raw_along_track;
  memcpy(&raw_along_track, &tmp_along_track, sizeof(tmp_along_track));
  if (raw_along_track != 0) {
    total_size += 1 + 4;
  }

  // float across_track = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_across_track = this->_internal_across_track();
  uint32_t raw_across_track;
  memcpy(&raw_across_track, &tmp_across_track, sizeof(tmp_across_track));
  if (raw_across_track != 0) {
    total_size += 1 + 4;
  }

  // float suppose_size = 15;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_suppose_size = this->_internal_suppose_size();
  uint32_t raw_suppose_size;
  memcpy(&raw_suppose_size, &tmp_suppose_size, sizeof(tmp_suppose_size));
  if (raw_suppose_size != 0) {
    total_size += 1 + 4;
  }

  // uint32 priority = 16;
  if (this->_internal_priority() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // double target_longitude = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_target_longitude = this->_internal_target_longitude();
  uint64_t raw_target_longitude;
  memcpy(&raw_target_longitude, &tmp_target_longitude, sizeof(tmp_target_longitude));
  if (raw_target_longitude != 0) {
    total_size += 2 + 8;
  }

  // double target_latitude = 20;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_target_latitude = this->_internal_target_latitude();
  uint64_t raw_target_latitude;
  memcpy(&raw_target_latitude, &tmp_target_latitude, sizeof(tmp_target_latitude));
  if (raw_target_latitude != 0) {
    total_size += 2 + 8;
  }

  // float position_error = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_error = this->_internal_position_error();
  uint32_t raw_position_error;
  memcpy(&raw_position_error, &tmp_position_error, sizeof(tmp_position_error));
  if (raw_position_error != 0) {
    total_size += 2 + 4;
  }

  // uint32 status = 24;
  if (this->_internal_status() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideScanSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SideScanSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideScanSource::GetClassData() const { return &_class_data_; }


void SideScanSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SideScanSource*>(&to_msg);
  auto& from = static_cast<const SideScanSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SideScanSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_computer_time().empty()) {
    _this->_internal_set_computer_time(from._internal_computer_time());
  }
  if (!from._internal_dt_time().empty()) {
    _this->_internal_set_dt_time(from._internal_dt_time());
  }
  if (!from._internal_horizontal_range_direction().empty()) {
    _this->_internal_set_horizontal_range_direction(from._internal_horizontal_range_direction());
  }
  if (!from._internal_side_scan_image_name().empty()) {
    _this->_internal_set_side_scan_image_name(from._internal_side_scan_image_name());
  }
  if (!from._internal_remarks().empty()) {
    _this->_internal_set_remarks(from._internal_remarks());
  }
  if (!from._internal_verify_image_paths().empty()) {
    _this->_internal_set_verify_image_paths(from._internal_verify_image_paths());
  }
  if (!from._internal_image_description().empty()) {
    _this->_internal_set_image_description(from._internal_image_description());
  }
  if (!from._internal_cruise_number().empty()) {
    _this->_internal_set_cruise_number(from._internal_cruise_number());
  }
  if (!from._internal_dive_number().empty()) {
    _this->_internal_set_dive_number(from._internal_dive_number());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dt_speed = from._internal_dt_speed();
  uint32_t raw_dt_speed;
  memcpy(&raw_dt_speed, &tmp_dt_speed, sizeof(tmp_dt_speed));
  if (raw_dt_speed != 0) {
    _this->_internal_set_dt_speed(from._internal_dt_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horizontal_range_value = from._internal_horizontal_range_value();
  uint32_t raw_horizontal_range_value;
  memcpy(&raw_horizontal_range_value, &tmp_horizontal_range_value, sizeof(tmp_horizontal_range_value));
  if (raw_horizontal_range_value != 0) {
    _this->_internal_set_horizontal_range_value(from._internal_horizontal_range_value());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height_from_bottom = from._internal_height_from_bottom();
  uint32_t raw_height_from_bottom;
  memcpy(&raw_height_from_bottom, &tmp_height_from_bottom, sizeof(tmp_height_from_bottom));
  if (raw_height_from_bottom != 0) {
    _this->_internal_set_height_from_bottom(from._internal_height_from_bottom());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r_theat = from._internal_r_theat();
  uint32_t raw_r_theat;
  memcpy(&raw_r_theat, &tmp_r_theat, sizeof(tmp_r_theat));
  if (raw_r_theat != 0) {
    _this->_internal_set_r_theat(from._internal_r_theat());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_along_track = from._internal_along_track();
  uint32_t raw_along_track;
  memcpy(&raw_along_track, &tmp_along_track, sizeof(tmp_along_track));
  if (raw_along_track != 0) {
    _this->_internal_set_along_track(from._internal_along_track());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_across_track = from._internal_across_track();
  uint32_t raw_across_track;
  memcpy(&raw_across_track, &tmp_across_track, sizeof(tmp_across_track));
  if (raw_across_track != 0) {
    _this->_internal_set_across_track(from._internal_across_track());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_suppose_size = from._internal_suppose_size();
  uint32_t raw_suppose_size;
  memcpy(&raw_suppose_size, &tmp_suppose_size, sizeof(tmp_suppose_size));
  if (raw_suppose_size != 0) {
    _this->_internal_set_suppose_size(from._internal_suppose_size());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_target_longitude = from._internal_target_longitude();
  uint64_t raw_target_longitude;
  memcpy(&raw_target_longitude, &tmp_target_longitude, sizeof(tmp_target_longitude));
  if (raw_target_longitude != 0) {
    _this->_internal_set_target_longitude(from._internal_target_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_target_latitude = from._internal_target_latitude();
  uint64_t raw_target_latitude;
  memcpy(&raw_target_latitude, &tmp_target_latitude, sizeof(tmp_target_latitude));
  if (raw_target_latitude != 0) {
    _this->_internal_set_target_latitude(from._internal_target_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_error = from._internal_position_error();
  uint32_t raw_position_error;
  memcpy(&raw_position_error, &tmp_position_error, sizeof(tmp_position_error));
  if (raw_position_error != 0) {
    _this->_internal_set_position_error(from._internal_position_error());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideScanSource::CopyFrom(const SideScanSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SideScanSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideScanSource::IsInitialized() const {
  return true;
}

void SideScanSource::InternalSwap(SideScanSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.computer_time_, lhs_arena,
      &other->_impl_.computer_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dt_time_, lhs_arena,
      &other->_impl_.dt_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horizontal_range_direction_, lhs_arena,
      &other->_impl_.horizontal_range_direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.side_scan_image_name_, lhs_arena,
      &other->_impl_.side_scan_image_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remarks_, lhs_arena,
      &other->_impl_.remarks_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_image_paths_, lhs_arena,
      &other->_impl_.verify_image_paths_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_description_, lhs_arena,
      &other->_impl_.image_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_number_, lhs_arena,
      &other->_impl_.cruise_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dive_number_, lhs_arena,
      &other->_impl_.dive_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SideScanSource, _impl_.status_)
      + sizeof(SideScanSource::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SideScanSource, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SideScanSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[0]);
}

// ===================================================================

class SideScanSourceList::_Internal {
 public:
};

SideScanSourceList::SideScanSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SideScanSourceList)
}
SideScanSourceList::SideScanSourceList(const SideScanSourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SideScanSourceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SideScanSourceList)
}

inline void SideScanSourceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SideScanSourceList::~SideScanSourceList() {
  // @@protoc_insertion_point(destructor:SideScanSourceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SideScanSourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void SideScanSourceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SideScanSourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:SideScanSourceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideScanSourceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SideScanSource list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideScanSourceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SideScanSourceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SideScanSource list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SideScanSourceList)
  return target;
}

size_t SideScanSourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SideScanSourceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SideScanSource list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideScanSourceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SideScanSourceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideScanSourceList::GetClassData() const { return &_class_data_; }


void SideScanSourceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SideScanSourceList*>(&to_msg);
  auto& from = static_cast<const SideScanSourceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SideScanSourceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideScanSourceList::CopyFrom(const SideScanSourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SideScanSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideScanSourceList::IsInitialized() const {
  return true;
}

void SideScanSourceList::InternalSwap(SideScanSourceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideScanSourceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[1]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:StatusResponse)
}

inline void StatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:StatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void StatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StatusResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StatusResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }


void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SideScanSource*
Arena::CreateMaybeMessage< ::SideScanSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SideScanSource >(arena);
}
template<> PROTOBUF_NOINLINE ::SideScanSourceList*
Arena::CreateMaybeMessage< ::SideScanSourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SideScanSourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusResponse*
Arena::CreateMaybeMessage< ::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
