// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidescansource.proto

#include "sidescansource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR SideScanSource::SideScanSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cruise_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.scan_line_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cruise_year_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dt_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.horizontal_range_direction_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.horizontal_range_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.side_scan_image_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remarks_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.suppose_size_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_auv_sss_image_paths_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_image_paths_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_longitude_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.target_latitude_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_cruise_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.depth_)*/0
  , /*decltype(_impl_.dt_speed_)*/0
  , /*decltype(_impl_.height_from_bottom_)*/0
  , /*decltype(_impl_.image_top_left_longitude_)*/0
  , /*decltype(_impl_.image_top_left_latitude_)*/0
  , /*decltype(_impl_.r_theta_)*/0
  , /*decltype(_impl_.image_total_byte_)*/0u
  , /*decltype(_impl_.image_bottom_right_longitude_)*/0
  , /*decltype(_impl_.image_bottom_right_latitude_)*/0
  , /*decltype(_impl_.along_track_)*/0
  , /*decltype(_impl_.across_track_)*/0
  , /*decltype(_impl_.priority_)*/0u
  , /*decltype(_impl_.verify_flag_)*/false
  , /*decltype(_impl_.status_flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SideScanSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideScanSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideScanSourceDefaultTypeInternal() {}
  union {
    SideScanSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideScanSourceDefaultTypeInternal _SideScanSource_default_instance_;
PROTOBUF_CONSTEXPR SideScanSourceList::SideScanSourceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SideScanSourceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SideScanSourceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SideScanSourceListDefaultTypeInternal() {}
  union {
    SideScanSourceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SideScanSourceListDefaultTypeInternal _SideScanSourceList_default_instance_;
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
PROTOBUF_CONSTEXPR CruiseRouteSource::CruiseRouteSource(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cruise_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0
  , /*decltype(_impl_.area_)*/0
  , /*decltype(_impl_.cover_error_number_)*/0u
  , /*decltype(_impl_.status_flag_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CruiseRouteSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CruiseRouteSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CruiseRouteSourceDefaultTypeInternal() {}
  union {
    CruiseRouteSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CruiseRouteSourceDefaultTypeInternal _CruiseRouteSource_default_instance_;
PROTOBUF_CONSTEXPR CruiseRouteSourceList::CruiseRouteSourceList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CruiseRouteSourceListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CruiseRouteSourceListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CruiseRouteSourceListDefaultTypeInternal() {}
  union {
    CruiseRouteSourceList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CruiseRouteSourceListDefaultTypeInternal _CruiseRouteSourceList_default_instance_;
PROTOBUF_CONSTEXPR SearchFilterParamter::SearchFilterParamter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cruise_year_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cruise_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchFilterParamterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchFilterParamterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchFilterParamterDefaultTypeInternal() {}
  union {
    SearchFilterParamter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchFilterParamterDefaultTypeInternal _SearchFilterParamter_default_instance_;
PROTOBUF_CONSTEXPR SearchFilterParamterList::SearchFilterParamterList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchFilterParamterListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchFilterParamterListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchFilterParamterListDefaultTypeInternal() {}
  union {
    SearchFilterParamterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchFilterParamterListDefaultTypeInternal _SearchFilterParamterList_default_instance_;
PROTOBUF_CONSTEXPR FilterSearchParameter::FilterSearchParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.verify_dive_number_)*/{}
  , /*decltype(_impl_.cruise_year_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cruise_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.priority_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verify_flag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FilterSearchParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterSearchParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterSearchParameterDefaultTypeInternal() {}
  union {
    FilterSearchParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterSearchParameterDefaultTypeInternal _FilterSearchParameter_default_instance_;
PROTOBUF_CONSTEXPR KeywordSearchParameter::KeywordSearchParameter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.keyword_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeywordSearchParameterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeywordSearchParameterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeywordSearchParameterDefaultTypeInternal() {}
  union {
    KeywordSearchParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeywordSearchParameterDefaultTypeInternal _KeywordSearchParameter_default_instance_;
PROTOBUF_CONSTEXPR RequestTrajectory::RequestTrajectory(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cruise_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dive_number_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trajectory_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestTrajectoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestTrajectoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestTrajectoryDefaultTypeInternal() {}
  union {
    RequestTrajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestTrajectoryDefaultTypeInternal _RequestTrajectory_default_instance_;
PROTOBUF_CONSTEXPR RequestTrajectoryResponse::RequestTrajectoryResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.position_chains_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestTrajectoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestTrajectoryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestTrajectoryResponseDefaultTypeInternal() {}
  union {
    RequestTrajectoryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestTrajectoryResponseDefaultTypeInternal _RequestTrajectoryResponse_default_instance_;
PROTOBUF_CONSTEXPR RequestStatistics::RequestStatistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.query_dt_)*/false
  , /*decltype(_impl_.query_auv_)*/false
  , /*decltype(_impl_.query_hov_)*/false
  , /*decltype(_impl_.query_ship_)*/false
  , /*decltype(_impl_.query_errorpoint_)*/false
  , /*decltype(_impl_.query_preface_)*/false
  , /*decltype(_impl_.query_chart_data_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestStatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestStatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestStatisticsDefaultTypeInternal() {}
  union {
    RequestStatistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestStatisticsDefaultTypeInternal _RequestStatistics_default_instance_;
PROTOBUF_CONSTEXPR RequestStatisticsResponse::RequestStatisticsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.errorpoint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dt_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auv_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hov_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ship_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.preface_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chart_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestStatisticsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestStatisticsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestStatisticsResponseDefaultTypeInternal() {}
  union {
    RequestStatisticsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestStatisticsResponseDefaultTypeInternal _RequestStatisticsResponse_default_instance_;
static ::_pb::Metadata file_level_metadata_sidescansource_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_sidescansource_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_sidescansource_2eproto = nullptr;

const uint32_t TableStruct_sidescansource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.cruise_number_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.dive_number_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.scan_line_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.cruise_year_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.dt_time_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.depth_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.dt_speed_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.horizontal_range_direction_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.horizontal_range_value_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.height_from_bottom_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.r_theta_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.side_scan_image_name_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_top_left_longitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_top_left_latitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_bottom_right_longitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_bottom_right_latitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_total_byte_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.along_track_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.across_track_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.remarks_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.suppose_size_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_auv_sss_image_paths_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_image_paths_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.image_description_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.target_longitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.target_latitude_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.position_error_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_cruise_number_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_dive_number_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_time_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.verify_flag_),
  PROTOBUF_FIELD_OFFSET(::SideScanSource, _impl_.status_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SideScanSourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SideScanSourceList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::StatusResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::StatusResponse, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.cruise_),
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.area_),
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.cover_error_number_),
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSource, _impl_.status_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CruiseRouteSourceList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamter, _impl_.cruise_year_),
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamter, _impl_.cruise_number_),
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamter, _impl_.dive_number_),
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamter, _impl_.verify_dive_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SearchFilterParamterList, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _impl_.cruise_year_),
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _impl_.cruise_number_),
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _impl_.dive_number_),
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _impl_.verify_dive_number_),
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::FilterSearchParameter, _impl_.verify_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KeywordSearchParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::KeywordSearchParameter, _impl_.keyword_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestTrajectory, _impl_.cruise_number_),
  PROTOBUF_FIELD_OFFSET(::RequestTrajectory, _impl_.dive_number_),
  PROTOBUF_FIELD_OFFSET(::RequestTrajectory, _impl_.trajectory_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestTrajectoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestTrajectoryResponse, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::RequestTrajectoryResponse, _impl_.position_chains_),
  PROTOBUF_FIELD_OFFSET(::RequestTrajectoryResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_dt_),
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_auv_),
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_hov_),
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_ship_),
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_errorpoint_),
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_preface_),
  PROTOBUF_FIELD_OFFSET(::RequestStatistics, _impl_.query_chart_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.errorpoint_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.dt_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.auv_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.hov_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.ship_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.preface_),
  PROTOBUF_FIELD_OFFSET(::RequestStatisticsResponse, _impl_.chart_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::SideScanSource)},
  { 42, -1, -1, sizeof(::SideScanSourceList)},
  { 49, -1, -1, sizeof(::StatusResponse)},
  { 57, -1, -1, sizeof(::CruiseRouteSource)},
  { 70, -1, -1, sizeof(::CruiseRouteSourceList)},
  { 77, -1, -1, sizeof(::SearchFilterParamter)},
  { 87, -1, -1, sizeof(::SearchFilterParamterList)},
  { 94, -1, -1, sizeof(::FilterSearchParameter)},
  { 106, -1, -1, sizeof(::KeywordSearchParameter)},
  { 113, -1, -1, sizeof(::RequestTrajectory)},
  { 122, -1, -1, sizeof(::RequestTrajectoryResponse)},
  { 131, -1, -1, sizeof(::RequestStatistics)},
  { 144, -1, -1, sizeof(::RequestStatisticsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_SideScanSource_default_instance_._instance,
  &::_SideScanSourceList_default_instance_._instance,
  &::_StatusResponse_default_instance_._instance,
  &::_CruiseRouteSource_default_instance_._instance,
  &::_CruiseRouteSourceList_default_instance_._instance,
  &::_SearchFilterParamter_default_instance_._instance,
  &::_SearchFilterParamterList_default_instance_._instance,
  &::_FilterSearchParameter_default_instance_._instance,
  &::_KeywordSearchParameter_default_instance_._instance,
  &::_RequestTrajectory_default_instance_._instance,
  &::_RequestTrajectoryResponse_default_instance_._instance,
  &::_RequestStatistics_default_instance_._instance,
  &::_RequestStatisticsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_sidescansource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024sidescansource.proto\"\201\007\n\016SideScanSourc"
  "e\022\n\n\002id\030\001 \001(\t\022\025\n\rcruise_number\030\002 \001(\t\022\023\n\013"
  "dive_number\030\003 \001(\t\022\021\n\tscan_line\030\004 \001(\t\022\023\n\013"
  "cruise_year\030\005 \001(\t\022\017\n\007dt_time\030\006 \001(\t\022\021\n\tlo"
  "ngitude\030\007 \001(\001\022\020\n\010latitude\030\010 \001(\001\022\r\n\005depth"
  "\030\t \001(\001\022\020\n\010dt_speed\030\n \001(\002\022\"\n\032horizontal_r"
  "ange_direction\030\013 \001(\t\022\036\n\026horizontal_range"
  "_value\030\014 \001(\t\022\032\n\022height_from_bottom\030\r \001(\002"
  "\022\017\n\007r_theta\030\016 \001(\002\022\034\n\024side_scan_image_nam"
  "e\030\017 \001(\t\022 \n\030image_top_left_longitude\030\020 \001("
  "\001\022\037\n\027image_top_left_latitude\030\021 \001(\001\022$\n\034im"
  "age_bottom_right_longitude\030\022 \001(\001\022#\n\033imag"
  "e_bottom_right_latitude\030\023 \001(\001\022\030\n\020image_t"
  "otal_byte\030\024 \001(\r\022\023\n\013along_track\030\025 \001(\002\022\024\n\014"
  "across_track\030\026 \001(\002\022\017\n\007remarks\030\027 \001(\t\022\024\n\014s"
  "uppose_size\030\030 \001(\t\022\020\n\010priority\030\031 \001(\r\022\"\n\032v"
  "erify_auv_sss_image_paths\030\032 \001(\t\022\032\n\022verif"
  "y_image_paths\030\033 \001(\t\022\031\n\021image_description"
  "\030\034 \001(\t\022\030\n\020target_longitude\030\035 \001(\t\022\027\n\017targ"
  "et_latitude\030\036 \001(\t\022\026\n\016position_error\030\037 \001("
  "\t\022\034\n\024verify_cruise_number\030  \001(\t\022\032\n\022verif"
  "y_dive_number\030! \001(\t\022\023\n\013verify_time\030\" \001(\t"
  "\022\023\n\013verify_flag\030# \001(\010\022\023\n\013status_flag\030$ \001"
  "(\r\"3\n\022SideScanSourceList\022\035\n\004list\030\001 \003(\0132\017"
  ".SideScanSource\"1\n\016StatusResponse\022\016\n\006sta"
  "tus\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\"\216\001\n\021CruiseRou"
  "teSource\022\016\n\006cruise\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\014"
  "\n\004name\030\003 \001(\t\022\016\n\006length\030\004 \001(\002\022\014\n\004area\030\005 \001"
  "(\002\022\032\n\022cover_error_number\030\006 \001(\r\022\023\n\013status"
  "_flag\030\035 \001(\r\"9\n\025CruiseRouteSourceList\022 \n\004"
  "list\030\001 \003(\0132\022.CruiseRouteSource\"s\n\024Search"
  "FilterParamter\022\023\n\013cruise_year\030\001 \001(\t\022\025\n\rc"
  "ruise_number\030\002 \001(\t\022\023\n\013dive_number\030\003 \001(\t\022"
  "\032\n\022verify_dive_number\030\004 \001(\t\"\?\n\030SearchFil"
  "terParamterList\022#\n\004list\030\001 \003(\0132\025.SearchFi"
  "lterParamter\"\233\001\n\025FilterSearchParameter\022\023"
  "\n\013cruise_year\030\001 \001(\t\022\025\n\rcruise_number\030\002 \001"
  "(\t\022\023\n\013dive_number\030\003 \001(\t\022\032\n\022verify_dive_n"
  "umber\030\004 \003(\t\022\020\n\010priority\030\005 \001(\t\022\023\n\013verify_"
  "flag\030\006 \001(\t\")\n\026KeywordSearchParameter\022\017\n\007"
  "keyword\030\001 \001(\t\"X\n\021RequestTrajectory\022\025\n\rcr"
  "uise_number\030\001 \001(\t\022\023\n\013dive_number\030\002 \001(\t\022\027"
  "\n\017trajectory_type\030\003 \001(\t\"P\n\031RequestTrajec"
  "toryResponse\022\n\n\002id\030\001 \001(\t\022\027\n\017position_cha"
  "ins\030\003 \001(\t\022\016\n\006status\030\004 \001(\010\"\252\001\n\021RequestSta"
  "tistics\022\020\n\010query_dt\030\001 \001(\010\022\021\n\tquery_auv\030\002"
  " \001(\010\022\021\n\tquery_hov\030\003 \001(\010\022\022\n\nquery_ship\030\004 "
  "\001(\010\022\030\n\020query_errorpoint\030\005 \001(\010\022\025\n\rquery_p"
  "reface\030\006 \001(\010\022\030\n\020query_chart_data\030\007 \001(\010\"\251"
  "\001\n\031RequestStatisticsResponse\022\016\n\006status\030\001"
  " \001(\010\022\017\n\007message\030\002 \001(\t\022\022\n\nerrorpoint\030\003 \001("
  "\t\022\n\n\002dt\030\004 \001(\t\022\013\n\003auv\030\005 \001(\t\022\013\n\003hov\030\006 \001(\t\022"
  "\014\n\004ship\030\007 \001(\t\022\017\n\007preface\030\010 \001(\t\022\022\n\nchart_"
  "data\030\t \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_sidescansource_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_sidescansource_2eproto = {
    false, false, 2138, descriptor_table_protodef_sidescansource_2eproto,
    "sidescansource.proto",
    &descriptor_table_sidescansource_2eproto_once, nullptr, 0, 13,
    schemas, file_default_instances, TableStruct_sidescansource_2eproto::offsets,
    file_level_metadata_sidescansource_2eproto, file_level_enum_descriptors_sidescansource_2eproto,
    file_level_service_descriptors_sidescansource_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_sidescansource_2eproto_getter() {
  return &descriptor_table_sidescansource_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_sidescansource_2eproto(&descriptor_table_sidescansource_2eproto);

// ===================================================================

class SideScanSource::_Internal {
 public:
};

SideScanSource::SideScanSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SideScanSource)
}
SideScanSource::SideScanSource(const SideScanSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SideScanSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.scan_line_){}
    , decltype(_impl_.cruise_year_){}
    , decltype(_impl_.dt_time_){}
    , decltype(_impl_.horizontal_range_direction_){}
    , decltype(_impl_.horizontal_range_value_){}
    , decltype(_impl_.side_scan_image_name_){}
    , decltype(_impl_.remarks_){}
    , decltype(_impl_.suppose_size_){}
    , decltype(_impl_.verify_auv_sss_image_paths_){}
    , decltype(_impl_.verify_image_paths_){}
    , decltype(_impl_.image_description_){}
    , decltype(_impl_.target_longitude_){}
    , decltype(_impl_.target_latitude_){}
    , decltype(_impl_.position_error_){}
    , decltype(_impl_.verify_cruise_number_){}
    , decltype(_impl_.verify_dive_number_){}
    , decltype(_impl_.verify_time_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.depth_){}
    , decltype(_impl_.dt_speed_){}
    , decltype(_impl_.height_from_bottom_){}
    , decltype(_impl_.image_top_left_longitude_){}
    , decltype(_impl_.image_top_left_latitude_){}
    , decltype(_impl_.r_theta_){}
    , decltype(_impl_.image_total_byte_){}
    , decltype(_impl_.image_bottom_right_longitude_){}
    , decltype(_impl_.image_bottom_right_latitude_){}
    , decltype(_impl_.along_track_){}
    , decltype(_impl_.across_track_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.verify_flag_){}
    , decltype(_impl_.status_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_number().empty()) {
    _this->_impl_.cruise_number_.Set(from._internal_cruise_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dive_number().empty()) {
    _this->_impl_.dive_number_.Set(from._internal_dive_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.scan_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scan_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_scan_line().empty()) {
    _this->_impl_.scan_line_.Set(from._internal_scan_line(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cruise_year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_year().empty()) {
    _this->_impl_.cruise_year_.Set(from._internal_cruise_year(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dt_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dt_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dt_time().empty()) {
    _this->_impl_.dt_time_.Set(from._internal_dt_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.horizontal_range_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_range_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_horizontal_range_direction().empty()) {
    _this->_impl_.horizontal_range_direction_.Set(from._internal_horizontal_range_direction(), 
      _this->GetArenaForAllocation());
  }
  _impl_.horizontal_range_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_range_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_horizontal_range_value().empty()) {
    _this->_impl_.horizontal_range_value_.Set(from._internal_horizontal_range_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.side_scan_image_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.side_scan_image_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_side_scan_image_name().empty()) {
    _this->_impl_.side_scan_image_name_.Set(from._internal_side_scan_image_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.remarks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remarks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_remarks().empty()) {
    _this->_impl_.remarks_.Set(from._internal_remarks(), 
      _this->GetArenaForAllocation());
  }
  _impl_.suppose_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suppose_size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_suppose_size().empty()) {
    _this->_impl_.suppose_size_.Set(from._internal_suppose_size(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_auv_sss_image_paths_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_auv_sss_image_paths_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_auv_sss_image_paths().empty()) {
    _this->_impl_.verify_auv_sss_image_paths_.Set(from._internal_verify_auv_sss_image_paths(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_image_paths_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_image_paths_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_image_paths().empty()) {
    _this->_impl_.verify_image_paths_.Set(from._internal_verify_image_paths(), 
      _this->GetArenaForAllocation());
  }
  _impl_.image_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_description().empty()) {
    _this->_impl_.image_description_.Set(from._internal_image_description(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_longitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_longitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_longitude().empty()) {
    _this->_impl_.target_longitude_.Set(from._internal_target_longitude(), 
      _this->GetArenaForAllocation());
  }
  _impl_.target_latitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_latitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target_latitude().empty()) {
    _this->_impl_.target_latitude_.Set(from._internal_target_latitude(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_error().empty()) {
    _this->_impl_.position_error_.Set(from._internal_position_error(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_cruise_number().empty()) {
    _this->_impl_.verify_cruise_number_.Set(from._internal_verify_cruise_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_dive_number().empty()) {
    _this->_impl_.verify_dive_number_.Set(from._internal_verify_dive_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_time().empty()) {
    _this->_impl_.verify_time_.Set(from._internal_verify_time(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.longitude_, &from._impl_.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_flag_) -
    reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.status_flag_));
  // @@protoc_insertion_point(copy_constructor:SideScanSource)
}

inline void SideScanSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.scan_line_){}
    , decltype(_impl_.cruise_year_){}
    , decltype(_impl_.dt_time_){}
    , decltype(_impl_.horizontal_range_direction_){}
    , decltype(_impl_.horizontal_range_value_){}
    , decltype(_impl_.side_scan_image_name_){}
    , decltype(_impl_.remarks_){}
    , decltype(_impl_.suppose_size_){}
    , decltype(_impl_.verify_auv_sss_image_paths_){}
    , decltype(_impl_.verify_image_paths_){}
    , decltype(_impl_.image_description_){}
    , decltype(_impl_.target_longitude_){}
    , decltype(_impl_.target_latitude_){}
    , decltype(_impl_.position_error_){}
    , decltype(_impl_.verify_cruise_number_){}
    , decltype(_impl_.verify_dive_number_){}
    , decltype(_impl_.verify_time_){}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.depth_){0}
    , decltype(_impl_.dt_speed_){0}
    , decltype(_impl_.height_from_bottom_){0}
    , decltype(_impl_.image_top_left_longitude_){0}
    , decltype(_impl_.image_top_left_latitude_){0}
    , decltype(_impl_.r_theta_){0}
    , decltype(_impl_.image_total_byte_){0u}
    , decltype(_impl_.image_bottom_right_longitude_){0}
    , decltype(_impl_.image_bottom_right_latitude_){0}
    , decltype(_impl_.along_track_){0}
    , decltype(_impl_.across_track_){0}
    , decltype(_impl_.priority_){0u}
    , decltype(_impl_.verify_flag_){false}
    , decltype(_impl_.status_flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.scan_line_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.scan_line_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cruise_year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dt_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dt_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.horizontal_range_direction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_range_direction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.horizontal_range_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.horizontal_range_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.side_scan_image_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.side_scan_image_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.remarks_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.remarks_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.suppose_size_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.suppose_size_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_auv_sss_image_paths_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_auv_sss_image_paths_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_image_paths_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_image_paths_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_longitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_longitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.target_latitude_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_latitude_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SideScanSource::~SideScanSource() {
  // @@protoc_insertion_point(destructor:SideScanSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SideScanSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.cruise_number_.Destroy();
  _impl_.dive_number_.Destroy();
  _impl_.scan_line_.Destroy();
  _impl_.cruise_year_.Destroy();
  _impl_.dt_time_.Destroy();
  _impl_.horizontal_range_direction_.Destroy();
  _impl_.horizontal_range_value_.Destroy();
  _impl_.side_scan_image_name_.Destroy();
  _impl_.remarks_.Destroy();
  _impl_.suppose_size_.Destroy();
  _impl_.verify_auv_sss_image_paths_.Destroy();
  _impl_.verify_image_paths_.Destroy();
  _impl_.image_description_.Destroy();
  _impl_.target_longitude_.Destroy();
  _impl_.target_latitude_.Destroy();
  _impl_.position_error_.Destroy();
  _impl_.verify_cruise_number_.Destroy();
  _impl_.verify_dive_number_.Destroy();
  _impl_.verify_time_.Destroy();
}

void SideScanSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SideScanSource::Clear() {
// @@protoc_insertion_point(message_clear_start:SideScanSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.cruise_number_.ClearToEmpty();
  _impl_.dive_number_.ClearToEmpty();
  _impl_.scan_line_.ClearToEmpty();
  _impl_.cruise_year_.ClearToEmpty();
  _impl_.dt_time_.ClearToEmpty();
  _impl_.horizontal_range_direction_.ClearToEmpty();
  _impl_.horizontal_range_value_.ClearToEmpty();
  _impl_.side_scan_image_name_.ClearToEmpty();
  _impl_.remarks_.ClearToEmpty();
  _impl_.suppose_size_.ClearToEmpty();
  _impl_.verify_auv_sss_image_paths_.ClearToEmpty();
  _impl_.verify_image_paths_.ClearToEmpty();
  _impl_.image_description_.ClearToEmpty();
  _impl_.target_longitude_.ClearToEmpty();
  _impl_.target_latitude_.ClearToEmpty();
  _impl_.position_error_.ClearToEmpty();
  _impl_.verify_cruise_number_.ClearToEmpty();
  _impl_.verify_dive_number_.ClearToEmpty();
  _impl_.verify_time_.ClearToEmpty();
  ::memset(&_impl_.longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_flag_) -
      reinterpret_cast<char*>(&_impl_.longitude_)) + sizeof(_impl_.status_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideScanSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.id"));
        } else
          goto handle_unusual;
        continue;
      // string cruise_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cruise_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.cruise_number"));
        } else
          goto handle_unusual;
        continue;
      // string dive_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.dive_number"));
        } else
          goto handle_unusual;
        continue;
      // string scan_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_scan_line();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.scan_line"));
        } else
          goto handle_unusual;
        continue;
      // string cruise_year = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cruise_year();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.cruise_year"));
        } else
          goto handle_unusual;
        continue;
      // string dt_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_dt_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.dt_time"));
        } else
          goto handle_unusual;
        continue;
      // double longitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double depth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.depth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float dt_speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.dt_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string horizontal_range_direction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_horizontal_range_direction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.horizontal_range_direction"));
        } else
          goto handle_unusual;
        continue;
      // string horizontal_range_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_horizontal_range_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.horizontal_range_value"));
        } else
          goto handle_unusual;
        continue;
      // float height_from_bottom = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _impl_.height_from_bottom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float r_theta = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _impl_.r_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string side_scan_image_name = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_side_scan_image_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.side_scan_image_name"));
        } else
          goto handle_unusual;
        continue;
      // double image_top_left_longitude = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.image_top_left_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double image_top_left_latitude = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 137)) {
          _impl_.image_top_left_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double image_bottom_right_longitude = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145)) {
          _impl_.image_bottom_right_longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double image_bottom_right_latitude = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 153)) {
          _impl_.image_bottom_right_latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 image_total_byte = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.image_total_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float along_track = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _impl_.along_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float across_track = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _impl_.across_track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string remarks = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_remarks();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.remarks"));
        } else
          goto handle_unusual;
        continue;
      // string suppose_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_suppose_size();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.suppose_size"));
        } else
          goto handle_unusual;
        continue;
      // uint32 priority = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verify_auv_sss_image_paths = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_verify_auv_sss_image_paths();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.verify_auv_sss_image_paths"));
        } else
          goto handle_unusual;
        continue;
      // string verify_image_paths = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_verify_image_paths();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.verify_image_paths"));
        } else
          goto handle_unusual;
        continue;
      // string image_description = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_image_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.image_description"));
        } else
          goto handle_unusual;
        continue;
      // string target_longitude = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_target_longitude();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.target_longitude"));
        } else
          goto handle_unusual;
        continue;
      // string target_latitude = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_target_latitude();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.target_latitude"));
        } else
          goto handle_unusual;
        continue;
      // string position_error = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          auto str = _internal_mutable_position_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.position_error"));
        } else
          goto handle_unusual;
        continue;
      // string verify_cruise_number = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          auto str = _internal_mutable_verify_cruise_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.verify_cruise_number"));
        } else
          goto handle_unusual;
        continue;
      // string verify_dive_number = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_verify_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.verify_dive_number"));
        } else
          goto handle_unusual;
        continue;
      // string verify_time = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_verify_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SideScanSource.verify_time"));
        } else
          goto handle_unusual;
        continue;
      // bool verify_flag = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.verify_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status_flag = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideScanSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SideScanSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string cruise_number = 2;
  if (!this->_internal_cruise_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_number().data(), static_cast<int>(this->_internal_cruise_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.cruise_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cruise_number(), target);
  }

  // string dive_number = 3;
  if (!this->_internal_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dive_number().data(), static_cast<int>(this->_internal_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.dive_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dive_number(), target);
  }

  // string scan_line = 4;
  if (!this->_internal_scan_line().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scan_line().data(), static_cast<int>(this->_internal_scan_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.scan_line");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scan_line(), target);
  }

  // string cruise_year = 5;
  if (!this->_internal_cruise_year().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_year().data(), static_cast<int>(this->_internal_cruise_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.cruise_year");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cruise_year(), target);
  }

  // string dt_time = 6;
  if (!this->_internal_dt_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dt_time().data(), static_cast<int>(this->_internal_dt_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.dt_time");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dt_time(), target);
  }

  // double longitude = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_longitude(), target);
  }

  // double latitude = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_latitude(), target);
  }

  // double depth = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_depth = this->_internal_depth();
  uint64_t raw_depth;
  memcpy(&raw_depth, &tmp_depth, sizeof(tmp_depth));
  if (raw_depth != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_depth(), target);
  }

  // float dt_speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dt_speed = this->_internal_dt_speed();
  uint32_t raw_dt_speed;
  memcpy(&raw_dt_speed, &tmp_dt_speed, sizeof(tmp_dt_speed));
  if (raw_dt_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_dt_speed(), target);
  }

  // string horizontal_range_direction = 11;
  if (!this->_internal_horizontal_range_direction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_horizontal_range_direction().data(), static_cast<int>(this->_internal_horizontal_range_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.horizontal_range_direction");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_horizontal_range_direction(), target);
  }

  // string horizontal_range_value = 12;
  if (!this->_internal_horizontal_range_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_horizontal_range_value().data(), static_cast<int>(this->_internal_horizontal_range_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.horizontal_range_value");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_horizontal_range_value(), target);
  }

  // float height_from_bottom = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height_from_bottom = this->_internal_height_from_bottom();
  uint32_t raw_height_from_bottom;
  memcpy(&raw_height_from_bottom, &tmp_height_from_bottom, sizeof(tmp_height_from_bottom));
  if (raw_height_from_bottom != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_height_from_bottom(), target);
  }

  // float r_theta = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r_theta = this->_internal_r_theta();
  uint32_t raw_r_theta;
  memcpy(&raw_r_theta, &tmp_r_theta, sizeof(tmp_r_theta));
  if (raw_r_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(14, this->_internal_r_theta(), target);
  }

  // string side_scan_image_name = 15;
  if (!this->_internal_side_scan_image_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_side_scan_image_name().data(), static_cast<int>(this->_internal_side_scan_image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.side_scan_image_name");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_side_scan_image_name(), target);
  }

  // double image_top_left_longitude = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_top_left_longitude = this->_internal_image_top_left_longitude();
  uint64_t raw_image_top_left_longitude;
  memcpy(&raw_image_top_left_longitude, &tmp_image_top_left_longitude, sizeof(tmp_image_top_left_longitude));
  if (raw_image_top_left_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_image_top_left_longitude(), target);
  }

  // double image_top_left_latitude = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_top_left_latitude = this->_internal_image_top_left_latitude();
  uint64_t raw_image_top_left_latitude;
  memcpy(&raw_image_top_left_latitude, &tmp_image_top_left_latitude, sizeof(tmp_image_top_left_latitude));
  if (raw_image_top_left_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(17, this->_internal_image_top_left_latitude(), target);
  }

  // double image_bottom_right_longitude = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_bottom_right_longitude = this->_internal_image_bottom_right_longitude();
  uint64_t raw_image_bottom_right_longitude;
  memcpy(&raw_image_bottom_right_longitude, &tmp_image_bottom_right_longitude, sizeof(tmp_image_bottom_right_longitude));
  if (raw_image_bottom_right_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_image_bottom_right_longitude(), target);
  }

  // double image_bottom_right_latitude = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_bottom_right_latitude = this->_internal_image_bottom_right_latitude();
  uint64_t raw_image_bottom_right_latitude;
  memcpy(&raw_image_bottom_right_latitude, &tmp_image_bottom_right_latitude, sizeof(tmp_image_bottom_right_latitude));
  if (raw_image_bottom_right_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(19, this->_internal_image_bottom_right_latitude(), target);
  }

  // uint32 image_total_byte = 20;
  if (this->_internal_image_total_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_image_total_byte(), target);
  }

  // float along_track = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_along_track = this->_internal_along_track();
  uint32_t raw_along_track;
  memcpy(&raw_along_track, &tmp_along_track, sizeof(tmp_along_track));
  if (raw_along_track != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(21, this->_internal_along_track(), target);
  }

  // float across_track = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_across_track = this->_internal_across_track();
  uint32_t raw_across_track;
  memcpy(&raw_across_track, &tmp_across_track, sizeof(tmp_across_track));
  if (raw_across_track != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_across_track(), target);
  }

  // string remarks = 23;
  if (!this->_internal_remarks().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remarks().data(), static_cast<int>(this->_internal_remarks().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.remarks");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_remarks(), target);
  }

  // string suppose_size = 24;
  if (!this->_internal_suppose_size().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_suppose_size().data(), static_cast<int>(this->_internal_suppose_size().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.suppose_size");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_suppose_size(), target);
  }

  // uint32 priority = 25;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(25, this->_internal_priority(), target);
  }

  // string verify_auv_sss_image_paths = 26;
  if (!this->_internal_verify_auv_sss_image_paths().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_auv_sss_image_paths().data(), static_cast<int>(this->_internal_verify_auv_sss_image_paths().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.verify_auv_sss_image_paths");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_verify_auv_sss_image_paths(), target);
  }

  // string verify_image_paths = 27;
  if (!this->_internal_verify_image_paths().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_image_paths().data(), static_cast<int>(this->_internal_verify_image_paths().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.verify_image_paths");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_verify_image_paths(), target);
  }

  // string image_description = 28;
  if (!this->_internal_image_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_description().data(), static_cast<int>(this->_internal_image_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.image_description");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_image_description(), target);
  }

  // string target_longitude = 29;
  if (!this->_internal_target_longitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_longitude().data(), static_cast<int>(this->_internal_target_longitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.target_longitude");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_target_longitude(), target);
  }

  // string target_latitude = 30;
  if (!this->_internal_target_latitude().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_latitude().data(), static_cast<int>(this->_internal_target_latitude().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.target_latitude");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_target_latitude(), target);
  }

  // string position_error = 31;
  if (!this->_internal_position_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_error().data(), static_cast<int>(this->_internal_position_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.position_error");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_position_error(), target);
  }

  // string verify_cruise_number = 32;
  if (!this->_internal_verify_cruise_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_cruise_number().data(), static_cast<int>(this->_internal_verify_cruise_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.verify_cruise_number");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_verify_cruise_number(), target);
  }

  // string verify_dive_number = 33;
  if (!this->_internal_verify_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_dive_number().data(), static_cast<int>(this->_internal_verify_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.verify_dive_number");
    target = stream->WriteStringMaybeAliased(
        33, this->_internal_verify_dive_number(), target);
  }

  // string verify_time = 34;
  if (!this->_internal_verify_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_time().data(), static_cast<int>(this->_internal_verify_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SideScanSource.verify_time");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_verify_time(), target);
  }

  // bool verify_flag = 35;
  if (this->_internal_verify_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_verify_flag(), target);
  }

  // uint32 status_flag = 36;
  if (this->_internal_status_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(36, this->_internal_status_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SideScanSource)
  return target;
}

size_t SideScanSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SideScanSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string cruise_number = 2;
  if (!this->_internal_cruise_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_number());
  }

  // string dive_number = 3;
  if (!this->_internal_dive_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dive_number());
  }

  // string scan_line = 4;
  if (!this->_internal_scan_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scan_line());
  }

  // string cruise_year = 5;
  if (!this->_internal_cruise_year().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_year());
  }

  // string dt_time = 6;
  if (!this->_internal_dt_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dt_time());
  }

  // string horizontal_range_direction = 11;
  if (!this->_internal_horizontal_range_direction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_horizontal_range_direction());
  }

  // string horizontal_range_value = 12;
  if (!this->_internal_horizontal_range_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_horizontal_range_value());
  }

  // string side_scan_image_name = 15;
  if (!this->_internal_side_scan_image_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_side_scan_image_name());
  }

  // string remarks = 23;
  if (!this->_internal_remarks().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remarks());
  }

  // string suppose_size = 24;
  if (!this->_internal_suppose_size().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_suppose_size());
  }

  // string verify_auv_sss_image_paths = 26;
  if (!this->_internal_verify_auv_sss_image_paths().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_auv_sss_image_paths());
  }

  // string verify_image_paths = 27;
  if (!this->_internal_verify_image_paths().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_image_paths());
  }

  // string image_description = 28;
  if (!this->_internal_image_description().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_description());
  }

  // string target_longitude = 29;
  if (!this->_internal_target_longitude().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_longitude());
  }

  // string target_latitude = 30;
  if (!this->_internal_target_latitude().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_latitude());
  }

  // string position_error = 31;
  if (!this->_internal_position_error().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_error());
  }

  // string verify_cruise_number = 32;
  if (!this->_internal_verify_cruise_number().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_cruise_number());
  }

  // string verify_dive_number = 33;
  if (!this->_internal_verify_dive_number().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_dive_number());
  }

  // string verify_time = 34;
  if (!this->_internal_verify_time().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_time());
  }

  // double longitude = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // double latitude = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double depth = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_depth = this->_internal_depth();
  uint64_t raw_depth;
  memcpy(&raw_depth, &tmp_depth, sizeof(tmp_depth));
  if (raw_depth != 0) {
    total_size += 1 + 8;
  }

  // float dt_speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dt_speed = this->_internal_dt_speed();
  uint32_t raw_dt_speed;
  memcpy(&raw_dt_speed, &tmp_dt_speed, sizeof(tmp_dt_speed));
  if (raw_dt_speed != 0) {
    total_size += 1 + 4;
  }

  // float height_from_bottom = 13;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height_from_bottom = this->_internal_height_from_bottom();
  uint32_t raw_height_from_bottom;
  memcpy(&raw_height_from_bottom, &tmp_height_from_bottom, sizeof(tmp_height_from_bottom));
  if (raw_height_from_bottom != 0) {
    total_size += 1 + 4;
  }

  // double image_top_left_longitude = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_top_left_longitude = this->_internal_image_top_left_longitude();
  uint64_t raw_image_top_left_longitude;
  memcpy(&raw_image_top_left_longitude, &tmp_image_top_left_longitude, sizeof(tmp_image_top_left_longitude));
  if (raw_image_top_left_longitude != 0) {
    total_size += 2 + 8;
  }

  // double image_top_left_latitude = 17;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_top_left_latitude = this->_internal_image_top_left_latitude();
  uint64_t raw_image_top_left_latitude;
  memcpy(&raw_image_top_left_latitude, &tmp_image_top_left_latitude, sizeof(tmp_image_top_left_latitude));
  if (raw_image_top_left_latitude != 0) {
    total_size += 2 + 8;
  }

  // float r_theta = 14;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r_theta = this->_internal_r_theta();
  uint32_t raw_r_theta;
  memcpy(&raw_r_theta, &tmp_r_theta, sizeof(tmp_r_theta));
  if (raw_r_theta != 0) {
    total_size += 1 + 4;
  }

  // uint32 image_total_byte = 20;
  if (this->_internal_image_total_byte() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_image_total_byte());
  }

  // double image_bottom_right_longitude = 18;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_bottom_right_longitude = this->_internal_image_bottom_right_longitude();
  uint64_t raw_image_bottom_right_longitude;
  memcpy(&raw_image_bottom_right_longitude, &tmp_image_bottom_right_longitude, sizeof(tmp_image_bottom_right_longitude));
  if (raw_image_bottom_right_longitude != 0) {
    total_size += 2 + 8;
  }

  // double image_bottom_right_latitude = 19;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_bottom_right_latitude = this->_internal_image_bottom_right_latitude();
  uint64_t raw_image_bottom_right_latitude;
  memcpy(&raw_image_bottom_right_latitude, &tmp_image_bottom_right_latitude, sizeof(tmp_image_bottom_right_latitude));
  if (raw_image_bottom_right_latitude != 0) {
    total_size += 2 + 8;
  }

  // float along_track = 21;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_along_track = this->_internal_along_track();
  uint32_t raw_along_track;
  memcpy(&raw_along_track, &tmp_along_track, sizeof(tmp_along_track));
  if (raw_along_track != 0) {
    total_size += 2 + 4;
  }

  // float across_track = 22;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_across_track = this->_internal_across_track();
  uint32_t raw_across_track;
  memcpy(&raw_across_track, &tmp_across_track, sizeof(tmp_across_track));
  if (raw_across_track != 0) {
    total_size += 2 + 4;
  }

  // uint32 priority = 25;
  if (this->_internal_priority() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_priority());
  }

  // bool verify_flag = 35;
  if (this->_internal_verify_flag() != 0) {
    total_size += 2 + 1;
  }

  // uint32 status_flag = 36;
  if (this->_internal_status_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_status_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideScanSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SideScanSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideScanSource::GetClassData() const { return &_class_data_; }


void SideScanSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SideScanSource*>(&to_msg);
  auto& from = static_cast<const SideScanSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SideScanSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_cruise_number().empty()) {
    _this->_internal_set_cruise_number(from._internal_cruise_number());
  }
  if (!from._internal_dive_number().empty()) {
    _this->_internal_set_dive_number(from._internal_dive_number());
  }
  if (!from._internal_scan_line().empty()) {
    _this->_internal_set_scan_line(from._internal_scan_line());
  }
  if (!from._internal_cruise_year().empty()) {
    _this->_internal_set_cruise_year(from._internal_cruise_year());
  }
  if (!from._internal_dt_time().empty()) {
    _this->_internal_set_dt_time(from._internal_dt_time());
  }
  if (!from._internal_horizontal_range_direction().empty()) {
    _this->_internal_set_horizontal_range_direction(from._internal_horizontal_range_direction());
  }
  if (!from._internal_horizontal_range_value().empty()) {
    _this->_internal_set_horizontal_range_value(from._internal_horizontal_range_value());
  }
  if (!from._internal_side_scan_image_name().empty()) {
    _this->_internal_set_side_scan_image_name(from._internal_side_scan_image_name());
  }
  if (!from._internal_remarks().empty()) {
    _this->_internal_set_remarks(from._internal_remarks());
  }
  if (!from._internal_suppose_size().empty()) {
    _this->_internal_set_suppose_size(from._internal_suppose_size());
  }
  if (!from._internal_verify_auv_sss_image_paths().empty()) {
    _this->_internal_set_verify_auv_sss_image_paths(from._internal_verify_auv_sss_image_paths());
  }
  if (!from._internal_verify_image_paths().empty()) {
    _this->_internal_set_verify_image_paths(from._internal_verify_image_paths());
  }
  if (!from._internal_image_description().empty()) {
    _this->_internal_set_image_description(from._internal_image_description());
  }
  if (!from._internal_target_longitude().empty()) {
    _this->_internal_set_target_longitude(from._internal_target_longitude());
  }
  if (!from._internal_target_latitude().empty()) {
    _this->_internal_set_target_latitude(from._internal_target_latitude());
  }
  if (!from._internal_position_error().empty()) {
    _this->_internal_set_position_error(from._internal_position_error());
  }
  if (!from._internal_verify_cruise_number().empty()) {
    _this->_internal_set_verify_cruise_number(from._internal_verify_cruise_number());
  }
  if (!from._internal_verify_dive_number().empty()) {
    _this->_internal_set_verify_dive_number(from._internal_verify_dive_number());
  }
  if (!from._internal_verify_time().empty()) {
    _this->_internal_set_verify_time(from._internal_verify_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_depth = from._internal_depth();
  uint64_t raw_depth;
  memcpy(&raw_depth, &tmp_depth, sizeof(tmp_depth));
  if (raw_depth != 0) {
    _this->_internal_set_depth(from._internal_depth());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dt_speed = from._internal_dt_speed();
  uint32_t raw_dt_speed;
  memcpy(&raw_dt_speed, &tmp_dt_speed, sizeof(tmp_dt_speed));
  if (raw_dt_speed != 0) {
    _this->_internal_set_dt_speed(from._internal_dt_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height_from_bottom = from._internal_height_from_bottom();
  uint32_t raw_height_from_bottom;
  memcpy(&raw_height_from_bottom, &tmp_height_from_bottom, sizeof(tmp_height_from_bottom));
  if (raw_height_from_bottom != 0) {
    _this->_internal_set_height_from_bottom(from._internal_height_from_bottom());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_top_left_longitude = from._internal_image_top_left_longitude();
  uint64_t raw_image_top_left_longitude;
  memcpy(&raw_image_top_left_longitude, &tmp_image_top_left_longitude, sizeof(tmp_image_top_left_longitude));
  if (raw_image_top_left_longitude != 0) {
    _this->_internal_set_image_top_left_longitude(from._internal_image_top_left_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_top_left_latitude = from._internal_image_top_left_latitude();
  uint64_t raw_image_top_left_latitude;
  memcpy(&raw_image_top_left_latitude, &tmp_image_top_left_latitude, sizeof(tmp_image_top_left_latitude));
  if (raw_image_top_left_latitude != 0) {
    _this->_internal_set_image_top_left_latitude(from._internal_image_top_left_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r_theta = from._internal_r_theta();
  uint32_t raw_r_theta;
  memcpy(&raw_r_theta, &tmp_r_theta, sizeof(tmp_r_theta));
  if (raw_r_theta != 0) {
    _this->_internal_set_r_theta(from._internal_r_theta());
  }
  if (from._internal_image_total_byte() != 0) {
    _this->_internal_set_image_total_byte(from._internal_image_total_byte());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_bottom_right_longitude = from._internal_image_bottom_right_longitude();
  uint64_t raw_image_bottom_right_longitude;
  memcpy(&raw_image_bottom_right_longitude, &tmp_image_bottom_right_longitude, sizeof(tmp_image_bottom_right_longitude));
  if (raw_image_bottom_right_longitude != 0) {
    _this->_internal_set_image_bottom_right_longitude(from._internal_image_bottom_right_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_image_bottom_right_latitude = from._internal_image_bottom_right_latitude();
  uint64_t raw_image_bottom_right_latitude;
  memcpy(&raw_image_bottom_right_latitude, &tmp_image_bottom_right_latitude, sizeof(tmp_image_bottom_right_latitude));
  if (raw_image_bottom_right_latitude != 0) {
    _this->_internal_set_image_bottom_right_latitude(from._internal_image_bottom_right_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_along_track = from._internal_along_track();
  uint32_t raw_along_track;
  memcpy(&raw_along_track, &tmp_along_track, sizeof(tmp_along_track));
  if (raw_along_track != 0) {
    _this->_internal_set_along_track(from._internal_along_track());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_across_track = from._internal_across_track();
  uint32_t raw_across_track;
  memcpy(&raw_across_track, &tmp_across_track, sizeof(tmp_across_track));
  if (raw_across_track != 0) {
    _this->_internal_set_across_track(from._internal_across_track());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_verify_flag() != 0) {
    _this->_internal_set_verify_flag(from._internal_verify_flag());
  }
  if (from._internal_status_flag() != 0) {
    _this->_internal_set_status_flag(from._internal_status_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideScanSource::CopyFrom(const SideScanSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SideScanSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideScanSource::IsInitialized() const {
  return true;
}

void SideScanSource::InternalSwap(SideScanSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_number_, lhs_arena,
      &other->_impl_.cruise_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dive_number_, lhs_arena,
      &other->_impl_.dive_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.scan_line_, lhs_arena,
      &other->_impl_.scan_line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_year_, lhs_arena,
      &other->_impl_.cruise_year_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dt_time_, lhs_arena,
      &other->_impl_.dt_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horizontal_range_direction_, lhs_arena,
      &other->_impl_.horizontal_range_direction_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.horizontal_range_value_, lhs_arena,
      &other->_impl_.horizontal_range_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.side_scan_image_name_, lhs_arena,
      &other->_impl_.side_scan_image_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.remarks_, lhs_arena,
      &other->_impl_.remarks_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.suppose_size_, lhs_arena,
      &other->_impl_.suppose_size_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_auv_sss_image_paths_, lhs_arena,
      &other->_impl_.verify_auv_sss_image_paths_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_image_paths_, lhs_arena,
      &other->_impl_.verify_image_paths_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_description_, lhs_arena,
      &other->_impl_.image_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_longitude_, lhs_arena,
      &other->_impl_.target_longitude_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_latitude_, lhs_arena,
      &other->_impl_.target_latitude_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_error_, lhs_arena,
      &other->_impl_.position_error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_cruise_number_, lhs_arena,
      &other->_impl_.verify_cruise_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_dive_number_, lhs_arena,
      &other->_impl_.verify_dive_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_time_, lhs_arena,
      &other->_impl_.verify_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SideScanSource, _impl_.status_flag_)
      + sizeof(SideScanSource::_impl_.status_flag_)
      - PROTOBUF_FIELD_OFFSET(SideScanSource, _impl_.longitude_)>(
          reinterpret_cast<char*>(&_impl_.longitude_),
          reinterpret_cast<char*>(&other->_impl_.longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SideScanSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[0]);
}

// ===================================================================

class SideScanSourceList::_Internal {
 public:
};

SideScanSourceList::SideScanSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SideScanSourceList)
}
SideScanSourceList::SideScanSourceList(const SideScanSourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SideScanSourceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SideScanSourceList)
}

inline void SideScanSourceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SideScanSourceList::~SideScanSourceList() {
  // @@protoc_insertion_point(destructor:SideScanSourceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SideScanSourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void SideScanSourceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SideScanSourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:SideScanSourceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SideScanSourceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SideScanSource list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SideScanSourceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SideScanSourceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SideScanSource list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SideScanSourceList)
  return target;
}

size_t SideScanSourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SideScanSourceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SideScanSource list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SideScanSourceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SideScanSourceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SideScanSourceList::GetClassData() const { return &_class_data_; }


void SideScanSourceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SideScanSourceList*>(&to_msg);
  auto& from = static_cast<const SideScanSourceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SideScanSourceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SideScanSourceList::CopyFrom(const SideScanSourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SideScanSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SideScanSourceList::IsInitialized() const {
  return true;
}

void SideScanSourceList::InternalSwap(SideScanSourceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SideScanSourceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[1]);
}

// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StatusResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:StatusResponse)
}

inline void StatusResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:StatusResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void StatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:StatusResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "StatusResponse.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatusResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StatusResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "StatusResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StatusResponse)
  return target;
}

size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StatusResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatusResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StatusResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }


void StatusResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StatusResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[2]);
}

// ===================================================================

class CruiseRouteSource::_Internal {
 public:
};

CruiseRouteSource::CruiseRouteSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CruiseRouteSource)
}
CruiseRouteSource::CruiseRouteSource(const CruiseRouteSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CruiseRouteSource* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cruise_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.area_){}
    , decltype(_impl_.cover_error_number_){}
    , decltype(_impl_.status_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cruise_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise().empty()) {
    _this->_impl_.cruise_.Set(from._internal_cruise(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.length_, &from._impl_.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_flag_) -
    reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.status_flag_));
  // @@protoc_insertion_point(copy_constructor:CruiseRouteSource)
}

inline void CruiseRouteSource::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cruise_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.length_){0}
    , decltype(_impl_.area_){0}
    , decltype(_impl_.cover_error_number_){0u}
    , decltype(_impl_.status_flag_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cruise_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CruiseRouteSource::~CruiseRouteSource() {
  // @@protoc_insertion_point(destructor:CruiseRouteSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CruiseRouteSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cruise_.Destroy();
  _impl_.type_.Destroy();
  _impl_.name_.Destroy();
}

void CruiseRouteSource::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CruiseRouteSource::Clear() {
// @@protoc_insertion_point(message_clear_start:CruiseRouteSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cruise_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_flag_) -
      reinterpret_cast<char*>(&_impl_.length_)) + sizeof(_impl_.status_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CruiseRouteSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cruise = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cruise();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CruiseRouteSource.cruise"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CruiseRouteSource.type"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "CruiseRouteSource.name"));
        } else
          goto handle_unusual;
        continue;
      // float length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float area = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.area_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 cover_error_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.cover_error_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 status_flag = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.status_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CruiseRouteSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CruiseRouteSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cruise = 1;
  if (!this->_internal_cruise().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise().data(), static_cast<int>(this->_internal_cruise().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CruiseRouteSource.cruise");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cruise(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CruiseRouteSource.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CruiseRouteSource.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // float length = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_length(), target);
  }

  // float area = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_area = this->_internal_area();
  uint32_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_area(), target);
  }

  // uint32 cover_error_number = 6;
  if (this->_internal_cover_error_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cover_error_number(), target);
  }

  // uint32 status_flag = 29;
  if (this->_internal_status_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(29, this->_internal_status_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CruiseRouteSource)
  return target;
}

size_t CruiseRouteSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CruiseRouteSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cruise = 1;
  if (!this->_internal_cruise().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // float length = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = this->_internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    total_size += 1 + 4;
  }

  // float area = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_area = this->_internal_area();
  uint32_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    total_size += 1 + 4;
  }

  // uint32 cover_error_number = 6;
  if (this->_internal_cover_error_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cover_error_number());
  }

  // uint32 status_flag = 29;
  if (this->_internal_status_flag() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_status_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CruiseRouteSource::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CruiseRouteSource::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CruiseRouteSource::GetClassData() const { return &_class_data_; }


void CruiseRouteSource::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CruiseRouteSource*>(&to_msg);
  auto& from = static_cast<const CruiseRouteSource&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CruiseRouteSource)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cruise().empty()) {
    _this->_internal_set_cruise(from._internal_cruise());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_length = from._internal_length();
  uint32_t raw_length;
  memcpy(&raw_length, &tmp_length, sizeof(tmp_length));
  if (raw_length != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_area = from._internal_area();
  uint32_t raw_area;
  memcpy(&raw_area, &tmp_area, sizeof(tmp_area));
  if (raw_area != 0) {
    _this->_internal_set_area(from._internal_area());
  }
  if (from._internal_cover_error_number() != 0) {
    _this->_internal_set_cover_error_number(from._internal_cover_error_number());
  }
  if (from._internal_status_flag() != 0) {
    _this->_internal_set_status_flag(from._internal_status_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CruiseRouteSource::CopyFrom(const CruiseRouteSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CruiseRouteSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CruiseRouteSource::IsInitialized() const {
  return true;
}

void CruiseRouteSource::InternalSwap(CruiseRouteSource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_, lhs_arena,
      &other->_impl_.cruise_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CruiseRouteSource, _impl_.status_flag_)
      + sizeof(CruiseRouteSource::_impl_.status_flag_)
      - PROTOBUF_FIELD_OFFSET(CruiseRouteSource, _impl_.length_)>(
          reinterpret_cast<char*>(&_impl_.length_),
          reinterpret_cast<char*>(&other->_impl_.length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CruiseRouteSource::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[3]);
}

// ===================================================================

class CruiseRouteSourceList::_Internal {
 public:
};

CruiseRouteSourceList::CruiseRouteSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CruiseRouteSourceList)
}
CruiseRouteSourceList::CruiseRouteSourceList(const CruiseRouteSourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CruiseRouteSourceList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CruiseRouteSourceList)
}

inline void CruiseRouteSourceList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CruiseRouteSourceList::~CruiseRouteSourceList() {
  // @@protoc_insertion_point(destructor:CruiseRouteSourceList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CruiseRouteSourceList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void CruiseRouteSourceList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CruiseRouteSourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:CruiseRouteSourceList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CruiseRouteSourceList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CruiseRouteSource list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CruiseRouteSourceList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CruiseRouteSourceList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CruiseRouteSource list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CruiseRouteSourceList)
  return target;
}

size_t CruiseRouteSourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CruiseRouteSourceList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CruiseRouteSource list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CruiseRouteSourceList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CruiseRouteSourceList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CruiseRouteSourceList::GetClassData() const { return &_class_data_; }


void CruiseRouteSourceList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CruiseRouteSourceList*>(&to_msg);
  auto& from = static_cast<const CruiseRouteSourceList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CruiseRouteSourceList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CruiseRouteSourceList::CopyFrom(const CruiseRouteSourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CruiseRouteSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CruiseRouteSourceList::IsInitialized() const {
  return true;
}

void CruiseRouteSourceList::InternalSwap(CruiseRouteSourceList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CruiseRouteSourceList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[4]);
}

// ===================================================================

class SearchFilterParamter::_Internal {
 public:
};

SearchFilterParamter::SearchFilterParamter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SearchFilterParamter)
}
SearchFilterParamter::SearchFilterParamter(const SearchFilterParamter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchFilterParamter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cruise_year_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.verify_dive_number_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cruise_year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_year().empty()) {
    _this->_impl_.cruise_year_.Set(from._internal_cruise_year(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_number().empty()) {
    _this->_impl_.cruise_number_.Set(from._internal_cruise_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dive_number().empty()) {
    _this->_impl_.dive_number_.Set(from._internal_dive_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_dive_number().empty()) {
    _this->_impl_.verify_dive_number_.Set(from._internal_verify_dive_number(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:SearchFilterParamter)
}

inline void SearchFilterParamter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cruise_year_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.verify_dive_number_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cruise_year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchFilterParamter::~SearchFilterParamter() {
  // @@protoc_insertion_point(destructor:SearchFilterParamter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchFilterParamter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cruise_year_.Destroy();
  _impl_.cruise_number_.Destroy();
  _impl_.dive_number_.Destroy();
  _impl_.verify_dive_number_.Destroy();
}

void SearchFilterParamter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchFilterParamter::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchFilterParamter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cruise_year_.ClearToEmpty();
  _impl_.cruise_number_.ClearToEmpty();
  _impl_.dive_number_.ClearToEmpty();
  _impl_.verify_dive_number_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchFilterParamter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cruise_year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cruise_year();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SearchFilterParamter.cruise_year"));
        } else
          goto handle_unusual;
        continue;
      // string cruise_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cruise_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SearchFilterParamter.cruise_number"));
        } else
          goto handle_unusual;
        continue;
      // string dive_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SearchFilterParamter.dive_number"));
        } else
          goto handle_unusual;
        continue;
      // string verify_dive_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_verify_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "SearchFilterParamter.verify_dive_number"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchFilterParamter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchFilterParamter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cruise_year = 1;
  if (!this->_internal_cruise_year().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_year().data(), static_cast<int>(this->_internal_cruise_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchFilterParamter.cruise_year");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cruise_year(), target);
  }

  // string cruise_number = 2;
  if (!this->_internal_cruise_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_number().data(), static_cast<int>(this->_internal_cruise_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchFilterParamter.cruise_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cruise_number(), target);
  }

  // string dive_number = 3;
  if (!this->_internal_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dive_number().data(), static_cast<int>(this->_internal_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchFilterParamter.dive_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dive_number(), target);
  }

  // string verify_dive_number = 4;
  if (!this->_internal_verify_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_dive_number().data(), static_cast<int>(this->_internal_verify_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SearchFilterParamter.verify_dive_number");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_verify_dive_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchFilterParamter)
  return target;
}

size_t SearchFilterParamter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchFilterParamter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cruise_year = 1;
  if (!this->_internal_cruise_year().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_year());
  }

  // string cruise_number = 2;
  if (!this->_internal_cruise_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_number());
  }

  // string dive_number = 3;
  if (!this->_internal_dive_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dive_number());
  }

  // string verify_dive_number = 4;
  if (!this->_internal_verify_dive_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_dive_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchFilterParamter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchFilterParamter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchFilterParamter::GetClassData() const { return &_class_data_; }


void SearchFilterParamter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchFilterParamter*>(&to_msg);
  auto& from = static_cast<const SearchFilterParamter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SearchFilterParamter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cruise_year().empty()) {
    _this->_internal_set_cruise_year(from._internal_cruise_year());
  }
  if (!from._internal_cruise_number().empty()) {
    _this->_internal_set_cruise_number(from._internal_cruise_number());
  }
  if (!from._internal_dive_number().empty()) {
    _this->_internal_set_dive_number(from._internal_dive_number());
  }
  if (!from._internal_verify_dive_number().empty()) {
    _this->_internal_set_verify_dive_number(from._internal_verify_dive_number());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchFilterParamter::CopyFrom(const SearchFilterParamter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchFilterParamter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFilterParamter::IsInitialized() const {
  return true;
}

void SearchFilterParamter::InternalSwap(SearchFilterParamter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_year_, lhs_arena,
      &other->_impl_.cruise_year_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_number_, lhs_arena,
      &other->_impl_.cruise_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dive_number_, lhs_arena,
      &other->_impl_.dive_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_dive_number_, lhs_arena,
      &other->_impl_.verify_dive_number_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchFilterParamter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[5]);
}

// ===================================================================

class SearchFilterParamterList::_Internal {
 public:
};

SearchFilterParamterList::SearchFilterParamterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:SearchFilterParamterList)
}
SearchFilterParamterList::SearchFilterParamterList(const SearchFilterParamterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchFilterParamterList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SearchFilterParamterList)
}

inline void SearchFilterParamterList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchFilterParamterList::~SearchFilterParamterList() {
  // @@protoc_insertion_point(destructor:SearchFilterParamterList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchFilterParamterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedPtrField();
}

void SearchFilterParamterList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchFilterParamterList::Clear() {
// @@protoc_insertion_point(message_clear_start:SearchFilterParamterList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchFilterParamterList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .SearchFilterParamter list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchFilterParamterList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SearchFilterParamterList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SearchFilterParamter list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SearchFilterParamterList)
  return target;
}

size_t SearchFilterParamterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SearchFilterParamterList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SearchFilterParamter list = 1;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->_impl_.list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchFilterParamterList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchFilterParamterList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchFilterParamterList::GetClassData() const { return &_class_data_; }


void SearchFilterParamterList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchFilterParamterList*>(&to_msg);
  auto& from = static_cast<const SearchFilterParamterList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:SearchFilterParamterList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchFilterParamterList::CopyFrom(const SearchFilterParamterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SearchFilterParamterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchFilterParamterList::IsInitialized() const {
  return true;
}

void SearchFilterParamterList::InternalSwap(SearchFilterParamterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchFilterParamterList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[6]);
}

// ===================================================================

class FilterSearchParameter::_Internal {
 public:
};

FilterSearchParameter::FilterSearchParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:FilterSearchParameter)
}
FilterSearchParameter::FilterSearchParameter(const FilterSearchParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FilterSearchParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.verify_dive_number_){from._impl_.verify_dive_number_}
    , decltype(_impl_.cruise_year_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.verify_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cruise_year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_year().empty()) {
    _this->_impl_.cruise_year_.Set(from._internal_cruise_year(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_number().empty()) {
    _this->_impl_.cruise_number_.Set(from._internal_cruise_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dive_number().empty()) {
    _this->_impl_.dive_number_.Set(from._internal_dive_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_priority().empty()) {
    _this->_impl_.priority_.Set(from._internal_priority(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verify_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verify_flag().empty()) {
    _this->_impl_.verify_flag_.Set(from._internal_verify_flag(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:FilterSearchParameter)
}

inline void FilterSearchParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.verify_dive_number_){arena}
    , decltype(_impl_.cruise_year_){}
    , decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.priority_){}
    , decltype(_impl_.verify_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cruise_year_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.priority_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.priority_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verify_flag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verify_flag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FilterSearchParameter::~FilterSearchParameter() {
  // @@protoc_insertion_point(destructor:FilterSearchParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FilterSearchParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.verify_dive_number_.~RepeatedPtrField();
  _impl_.cruise_year_.Destroy();
  _impl_.cruise_number_.Destroy();
  _impl_.dive_number_.Destroy();
  _impl_.priority_.Destroy();
  _impl_.verify_flag_.Destroy();
}

void FilterSearchParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FilterSearchParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:FilterSearchParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.verify_dive_number_.Clear();
  _impl_.cruise_year_.ClearToEmpty();
  _impl_.cruise_number_.ClearToEmpty();
  _impl_.dive_number_.ClearToEmpty();
  _impl_.priority_.ClearToEmpty();
  _impl_.verify_flag_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterSearchParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cruise_year = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cruise_year();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FilterSearchParameter.cruise_year"));
        } else
          goto handle_unusual;
        continue;
      // string cruise_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cruise_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FilterSearchParameter.cruise_number"));
        } else
          goto handle_unusual;
        continue;
      // string dive_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FilterSearchParameter.dive_number"));
        } else
          goto handle_unusual;
        continue;
      // repeated string verify_dive_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_verify_dive_number();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "FilterSearchParameter.verify_dive_number"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_priority();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FilterSearchParameter.priority"));
        } else
          goto handle_unusual;
        continue;
      // string verify_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_verify_flag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "FilterSearchParameter.verify_flag"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FilterSearchParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:FilterSearchParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cruise_year = 1;
  if (!this->_internal_cruise_year().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_year().data(), static_cast<int>(this->_internal_cruise_year().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilterSearchParameter.cruise_year");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cruise_year(), target);
  }

  // string cruise_number = 2;
  if (!this->_internal_cruise_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_number().data(), static_cast<int>(this->_internal_cruise_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilterSearchParameter.cruise_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cruise_number(), target);
  }

  // string dive_number = 3;
  if (!this->_internal_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dive_number().data(), static_cast<int>(this->_internal_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilterSearchParameter.dive_number");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dive_number(), target);
  }

  // repeated string verify_dive_number = 4;
  for (int i = 0, n = this->_internal_verify_dive_number_size(); i < n; i++) {
    const auto& s = this->_internal_verify_dive_number(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilterSearchParameter.verify_dive_number");
    target = stream->WriteString(4, s, target);
  }

  // string priority = 5;
  if (!this->_internal_priority().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_priority().data(), static_cast<int>(this->_internal_priority().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilterSearchParameter.priority");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_priority(), target);
  }

  // string verify_flag = 6;
  if (!this->_internal_verify_flag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verify_flag().data(), static_cast<int>(this->_internal_verify_flag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "FilterSearchParameter.verify_flag");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_verify_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:FilterSearchParameter)
  return target;
}

size_t FilterSearchParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FilterSearchParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string verify_dive_number = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.verify_dive_number_.size());
  for (int i = 0, n = _impl_.verify_dive_number_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.verify_dive_number_.Get(i));
  }

  // string cruise_year = 1;
  if (!this->_internal_cruise_year().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_year());
  }

  // string cruise_number = 2;
  if (!this->_internal_cruise_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_number());
  }

  // string dive_number = 3;
  if (!this->_internal_dive_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dive_number());
  }

  // string priority = 5;
  if (!this->_internal_priority().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_priority());
  }

  // string verify_flag = 6;
  if (!this->_internal_verify_flag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verify_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FilterSearchParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FilterSearchParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FilterSearchParameter::GetClassData() const { return &_class_data_; }


void FilterSearchParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FilterSearchParameter*>(&to_msg);
  auto& from = static_cast<const FilterSearchParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:FilterSearchParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.verify_dive_number_.MergeFrom(from._impl_.verify_dive_number_);
  if (!from._internal_cruise_year().empty()) {
    _this->_internal_set_cruise_year(from._internal_cruise_year());
  }
  if (!from._internal_cruise_number().empty()) {
    _this->_internal_set_cruise_number(from._internal_cruise_number());
  }
  if (!from._internal_dive_number().empty()) {
    _this->_internal_set_dive_number(from._internal_dive_number());
  }
  if (!from._internal_priority().empty()) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (!from._internal_verify_flag().empty()) {
    _this->_internal_set_verify_flag(from._internal_verify_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FilterSearchParameter::CopyFrom(const FilterSearchParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FilterSearchParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterSearchParameter::IsInitialized() const {
  return true;
}

void FilterSearchParameter::InternalSwap(FilterSearchParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.verify_dive_number_.InternalSwap(&other->_impl_.verify_dive_number_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_year_, lhs_arena,
      &other->_impl_.cruise_year_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_number_, lhs_arena,
      &other->_impl_.cruise_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dive_number_, lhs_arena,
      &other->_impl_.dive_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.priority_, lhs_arena,
      &other->_impl_.priority_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verify_flag_, lhs_arena,
      &other->_impl_.verify_flag_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterSearchParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[7]);
}

// ===================================================================

class KeywordSearchParameter::_Internal {
 public:
};

KeywordSearchParameter::KeywordSearchParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:KeywordSearchParameter)
}
KeywordSearchParameter::KeywordSearchParameter(const KeywordSearchParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeywordSearchParameter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.keyword_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.keyword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keyword().empty()) {
    _this->_impl_.keyword_.Set(from._internal_keyword(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KeywordSearchParameter)
}

inline void KeywordSearchParameter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.keyword_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.keyword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keyword_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeywordSearchParameter::~KeywordSearchParameter() {
  // @@protoc_insertion_point(destructor:KeywordSearchParameter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeywordSearchParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.keyword_.Destroy();
}

void KeywordSearchParameter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeywordSearchParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:KeywordSearchParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.keyword_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeywordSearchParameter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string keyword = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_keyword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "KeywordSearchParameter.keyword"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeywordSearchParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeywordSearchParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string keyword = 1;
  if (!this->_internal_keyword().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keyword().data(), static_cast<int>(this->_internal_keyword().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "KeywordSearchParameter.keyword");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_keyword(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeywordSearchParameter)
  return target;
}

size_t KeywordSearchParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KeywordSearchParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string keyword = 1;
  if (!this->_internal_keyword().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keyword());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeywordSearchParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeywordSearchParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeywordSearchParameter::GetClassData() const { return &_class_data_; }


void KeywordSearchParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeywordSearchParameter*>(&to_msg);
  auto& from = static_cast<const KeywordSearchParameter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:KeywordSearchParameter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_keyword().empty()) {
    _this->_internal_set_keyword(from._internal_keyword());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeywordSearchParameter::CopyFrom(const KeywordSearchParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KeywordSearchParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordSearchParameter::IsInitialized() const {
  return true;
}

void KeywordSearchParameter::InternalSwap(KeywordSearchParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keyword_, lhs_arena,
      &other->_impl_.keyword_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeywordSearchParameter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[8]);
}

// ===================================================================

class RequestTrajectory::_Internal {
 public:
};

RequestTrajectory::RequestTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestTrajectory)
}
RequestTrajectory::RequestTrajectory(const RequestTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestTrajectory* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.trajectory_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cruise_number().empty()) {
    _this->_impl_.cruise_number_.Set(from._internal_cruise_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dive_number().empty()) {
    _this->_impl_.dive_number_.Set(from._internal_dive_number(), 
      _this->GetArenaForAllocation());
  }
  _impl_.trajectory_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trajectory_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trajectory_type().empty()) {
    _this->_impl_.trajectory_type_.Set(from._internal_trajectory_type(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RequestTrajectory)
}

inline void RequestTrajectory::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cruise_number_){}
    , decltype(_impl_.dive_number_){}
    , decltype(_impl_.trajectory_type_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cruise_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dive_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trajectory_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trajectory_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestTrajectory::~RequestTrajectory() {
  // @@protoc_insertion_point(destructor:RequestTrajectory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestTrajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cruise_number_.Destroy();
  _impl_.dive_number_.Destroy();
  _impl_.trajectory_type_.Destroy();
}

void RequestTrajectory::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestTrajectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cruise_number_.ClearToEmpty();
  _impl_.dive_number_.ClearToEmpty();
  _impl_.trajectory_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestTrajectory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cruise_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cruise_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestTrajectory.cruise_number"));
        } else
          goto handle_unusual;
        continue;
      // string dive_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dive_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestTrajectory.dive_number"));
        } else
          goto handle_unusual;
        continue;
      // string trajectory_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_trajectory_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestTrajectory.trajectory_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestTrajectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestTrajectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cruise_number = 1;
  if (!this->_internal_cruise_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cruise_number().data(), static_cast<int>(this->_internal_cruise_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestTrajectory.cruise_number");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cruise_number(), target);
  }

  // string dive_number = 2;
  if (!this->_internal_dive_number().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dive_number().data(), static_cast<int>(this->_internal_dive_number().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestTrajectory.dive_number");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dive_number(), target);
  }

  // string trajectory_type = 3;
  if (!this->_internal_trajectory_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trajectory_type().data(), static_cast<int>(this->_internal_trajectory_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestTrajectory.trajectory_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_trajectory_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestTrajectory)
  return target;
}

size_t RequestTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestTrajectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cruise_number = 1;
  if (!this->_internal_cruise_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cruise_number());
  }

  // string dive_number = 2;
  if (!this->_internal_dive_number().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dive_number());
  }

  // string trajectory_type = 3;
  if (!this->_internal_trajectory_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trajectory_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestTrajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestTrajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestTrajectory::GetClassData() const { return &_class_data_; }


void RequestTrajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestTrajectory*>(&to_msg);
  auto& from = static_cast<const RequestTrajectory&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestTrajectory)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cruise_number().empty()) {
    _this->_internal_set_cruise_number(from._internal_cruise_number());
  }
  if (!from._internal_dive_number().empty()) {
    _this->_internal_set_dive_number(from._internal_dive_number());
  }
  if (!from._internal_trajectory_type().empty()) {
    _this->_internal_set_trajectory_type(from._internal_trajectory_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestTrajectory::CopyFrom(const RequestTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTrajectory::IsInitialized() const {
  return true;
}

void RequestTrajectory::InternalSwap(RequestTrajectory* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cruise_number_, lhs_arena,
      &other->_impl_.cruise_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dive_number_, lhs_arena,
      &other->_impl_.dive_number_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trajectory_type_, lhs_arena,
      &other->_impl_.trajectory_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestTrajectory::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[9]);
}

// ===================================================================

class RequestTrajectoryResponse::_Internal {
 public:
};

RequestTrajectoryResponse::RequestTrajectoryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestTrajectoryResponse)
}
RequestTrajectoryResponse::RequestTrajectoryResponse(const RequestTrajectoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestTrajectoryResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.position_chains_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.position_chains_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_chains_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_position_chains().empty()) {
    _this->_impl_.position_chains_.Set(from._internal_position_chains(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:RequestTrajectoryResponse)
}

inline void RequestTrajectoryResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.position_chains_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.position_chains_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.position_chains_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestTrajectoryResponse::~RequestTrajectoryResponse() {
  // @@protoc_insertion_point(destructor:RequestTrajectoryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestTrajectoryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.position_chains_.Destroy();
}

void RequestTrajectoryResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestTrajectoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestTrajectoryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.position_chains_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestTrajectoryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestTrajectoryResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // string position_chains = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_position_chains();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestTrajectoryResponse.position_chains"));
        } else
          goto handle_unusual;
        continue;
      // bool status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestTrajectoryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestTrajectoryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestTrajectoryResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string position_chains = 3;
  if (!this->_internal_position_chains().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_position_chains().data(), static_cast<int>(this->_internal_position_chains().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestTrajectoryResponse.position_chains");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_position_chains(), target);
  }

  // bool status = 4;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestTrajectoryResponse)
  return target;
}

size_t RequestTrajectoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestTrajectoryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string position_chains = 3;
  if (!this->_internal_position_chains().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_position_chains());
  }

  // bool status = 4;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestTrajectoryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestTrajectoryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestTrajectoryResponse::GetClassData() const { return &_class_data_; }


void RequestTrajectoryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestTrajectoryResponse*>(&to_msg);
  auto& from = static_cast<const RequestTrajectoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestTrajectoryResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_position_chains().empty()) {
    _this->_internal_set_position_chains(from._internal_position_chains());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestTrajectoryResponse::CopyFrom(const RequestTrajectoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestTrajectoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestTrajectoryResponse::IsInitialized() const {
  return true;
}

void RequestTrajectoryResponse::InternalSwap(RequestTrajectoryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.position_chains_, lhs_arena,
      &other->_impl_.position_chains_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestTrajectoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[10]);
}

// ===================================================================

class RequestStatistics::_Internal {
 public:
};

RequestStatistics::RequestStatistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestStatistics)
}
RequestStatistics::RequestStatistics(const RequestStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestStatistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.query_dt_){}
    , decltype(_impl_.query_auv_){}
    , decltype(_impl_.query_hov_){}
    , decltype(_impl_.query_ship_){}
    , decltype(_impl_.query_errorpoint_){}
    , decltype(_impl_.query_preface_){}
    , decltype(_impl_.query_chart_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.query_dt_, &from._impl_.query_dt_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.query_chart_data_) -
    reinterpret_cast<char*>(&_impl_.query_dt_)) + sizeof(_impl_.query_chart_data_));
  // @@protoc_insertion_point(copy_constructor:RequestStatistics)
}

inline void RequestStatistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.query_dt_){false}
    , decltype(_impl_.query_auv_){false}
    , decltype(_impl_.query_hov_){false}
    , decltype(_impl_.query_ship_){false}
    , decltype(_impl_.query_errorpoint_){false}
    , decltype(_impl_.query_preface_){false}
    , decltype(_impl_.query_chart_data_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestStatistics::~RequestStatistics() {
  // @@protoc_insertion_point(destructor:RequestStatistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestStatistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestStatistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestStatistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.query_dt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.query_chart_data_) -
      reinterpret_cast<char*>(&_impl_.query_dt_)) + sizeof(_impl_.query_chart_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestStatistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool query_dt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.query_dt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool query_auv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.query_auv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool query_hov = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.query_hov_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool query_ship = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.query_ship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool query_errorpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.query_errorpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool query_preface = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.query_preface_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool query_chart_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.query_chart_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestStatistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestStatistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool query_dt = 1;
  if (this->_internal_query_dt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_query_dt(), target);
  }

  // bool query_auv = 2;
  if (this->_internal_query_auv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_query_auv(), target);
  }

  // bool query_hov = 3;
  if (this->_internal_query_hov() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_query_hov(), target);
  }

  // bool query_ship = 4;
  if (this->_internal_query_ship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_query_ship(), target);
  }

  // bool query_errorpoint = 5;
  if (this->_internal_query_errorpoint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_query_errorpoint(), target);
  }

  // bool query_preface = 6;
  if (this->_internal_query_preface() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_query_preface(), target);
  }

  // bool query_chart_data = 7;
  if (this->_internal_query_chart_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_query_chart_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestStatistics)
  return target;
}

size_t RequestStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestStatistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool query_dt = 1;
  if (this->_internal_query_dt() != 0) {
    total_size += 1 + 1;
  }

  // bool query_auv = 2;
  if (this->_internal_query_auv() != 0) {
    total_size += 1 + 1;
  }

  // bool query_hov = 3;
  if (this->_internal_query_hov() != 0) {
    total_size += 1 + 1;
  }

  // bool query_ship = 4;
  if (this->_internal_query_ship() != 0) {
    total_size += 1 + 1;
  }

  // bool query_errorpoint = 5;
  if (this->_internal_query_errorpoint() != 0) {
    total_size += 1 + 1;
  }

  // bool query_preface = 6;
  if (this->_internal_query_preface() != 0) {
    total_size += 1 + 1;
  }

  // bool query_chart_data = 7;
  if (this->_internal_query_chart_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestStatistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestStatistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestStatistics::GetClassData() const { return &_class_data_; }


void RequestStatistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestStatistics*>(&to_msg);
  auto& from = static_cast<const RequestStatistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestStatistics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_query_dt() != 0) {
    _this->_internal_set_query_dt(from._internal_query_dt());
  }
  if (from._internal_query_auv() != 0) {
    _this->_internal_set_query_auv(from._internal_query_auv());
  }
  if (from._internal_query_hov() != 0) {
    _this->_internal_set_query_hov(from._internal_query_hov());
  }
  if (from._internal_query_ship() != 0) {
    _this->_internal_set_query_ship(from._internal_query_ship());
  }
  if (from._internal_query_errorpoint() != 0) {
    _this->_internal_set_query_errorpoint(from._internal_query_errorpoint());
  }
  if (from._internal_query_preface() != 0) {
    _this->_internal_set_query_preface(from._internal_query_preface());
  }
  if (from._internal_query_chart_data() != 0) {
    _this->_internal_set_query_chart_data(from._internal_query_chart_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestStatistics::CopyFrom(const RequestStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatistics::IsInitialized() const {
  return true;
}

void RequestStatistics::InternalSwap(RequestStatistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestStatistics, _impl_.query_chart_data_)
      + sizeof(RequestStatistics::_impl_.query_chart_data_)
      - PROTOBUF_FIELD_OFFSET(RequestStatistics, _impl_.query_dt_)>(
          reinterpret_cast<char*>(&_impl_.query_dt_),
          reinterpret_cast<char*>(&other->_impl_.query_dt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStatistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[11]);
}

// ===================================================================

class RequestStatisticsResponse::_Internal {
 public:
};

RequestStatisticsResponse::RequestStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RequestStatisticsResponse)
}
RequestStatisticsResponse::RequestStatisticsResponse(const RequestStatisticsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestStatisticsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.errorpoint_){}
    , decltype(_impl_.dt_){}
    , decltype(_impl_.auv_){}
    , decltype(_impl_.hov_){}
    , decltype(_impl_.ship_){}
    , decltype(_impl_.preface_){}
    , decltype(_impl_.chart_data_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.errorpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errorpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_errorpoint().empty()) {
    _this->_impl_.errorpoint_.Set(from._internal_errorpoint(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dt().empty()) {
    _this->_impl_.dt_.Set(from._internal_dt(), 
      _this->GetArenaForAllocation());
  }
  _impl_.auv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auv().empty()) {
    _this->_impl_.auv_.Set(from._internal_auv(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hov_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hov_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hov().empty()) {
    _this->_impl_.hov_.Set(from._internal_hov(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ship_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ship_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ship().empty()) {
    _this->_impl_.ship_.Set(from._internal_ship(), 
      _this->GetArenaForAllocation());
  }
  _impl_.preface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preface().empty()) {
    _this->_impl_.preface_.Set(from._internal_preface(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chart_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chart_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chart_data().empty()) {
    _this->_impl_.chart_data_.Set(from._internal_chart_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:RequestStatisticsResponse)
}

inline void RequestStatisticsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.errorpoint_){}
    , decltype(_impl_.dt_){}
    , decltype(_impl_.auv_){}
    , decltype(_impl_.hov_){}
    , decltype(_impl_.ship_){}
    , decltype(_impl_.preface_){}
    , decltype(_impl_.chart_data_){}
    , decltype(_impl_.status_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.errorpoint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.errorpoint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dt_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.auv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.auv_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hov_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hov_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ship_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ship_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.preface_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preface_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chart_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chart_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestStatisticsResponse::~RequestStatisticsResponse() {
  // @@protoc_insertion_point(destructor:RequestStatisticsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestStatisticsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.errorpoint_.Destroy();
  _impl_.dt_.Destroy();
  _impl_.auv_.Destroy();
  _impl_.hov_.Destroy();
  _impl_.ship_.Destroy();
  _impl_.preface_.Destroy();
  _impl_.chart_data_.Destroy();
}

void RequestStatisticsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestStatisticsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestStatisticsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.errorpoint_.ClearToEmpty();
  _impl_.dt_.ClearToEmpty();
  _impl_.auv_.ClearToEmpty();
  _impl_.hov_.ClearToEmpty();
  _impl_.ship_.ClearToEmpty();
  _impl_.preface_.ClearToEmpty();
  _impl_.chart_data_.ClearToEmpty();
  _impl_.status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestStatisticsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // string errorpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_errorpoint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.errorpoint"));
        } else
          goto handle_unusual;
        continue;
      // string dt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_dt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.dt"));
        } else
          goto handle_unusual;
        continue;
      // string auv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_auv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.auv"));
        } else
          goto handle_unusual;
        continue;
      // string hov = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hov();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.hov"));
        } else
          goto handle_unusual;
        continue;
      // string ship = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ship();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.ship"));
        } else
          goto handle_unusual;
        continue;
      // string preface = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_preface();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.preface"));
        } else
          goto handle_unusual;
        continue;
      // string chart_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_chart_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "RequestStatisticsResponse.chart_data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestStatisticsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestStatisticsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string errorpoint = 3;
  if (!this->_internal_errorpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errorpoint().data(), static_cast<int>(this->_internal_errorpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.errorpoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errorpoint(), target);
  }

  // string dt = 4;
  if (!this->_internal_dt().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dt().data(), static_cast<int>(this->_internal_dt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.dt");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_dt(), target);
  }

  // string auv = 5;
  if (!this->_internal_auv().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auv().data(), static_cast<int>(this->_internal_auv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.auv");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_auv(), target);
  }

  // string hov = 6;
  if (!this->_internal_hov().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hov().data(), static_cast<int>(this->_internal_hov().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.hov");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hov(), target);
  }

  // string ship = 7;
  if (!this->_internal_ship().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ship().data(), static_cast<int>(this->_internal_ship().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.ship");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ship(), target);
  }

  // string preface = 8;
  if (!this->_internal_preface().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preface().data(), static_cast<int>(this->_internal_preface().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.preface");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_preface(), target);
  }

  // string chart_data = 9;
  if (!this->_internal_chart_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chart_data().data(), static_cast<int>(this->_internal_chart_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestStatisticsResponse.chart_data");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_chart_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestStatisticsResponse)
  return target;
}

size_t RequestStatisticsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestStatisticsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string errorpoint = 3;
  if (!this->_internal_errorpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errorpoint());
  }

  // string dt = 4;
  if (!this->_internal_dt().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dt());
  }

  // string auv = 5;
  if (!this->_internal_auv().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auv());
  }

  // string hov = 6;
  if (!this->_internal_hov().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hov());
  }

  // string ship = 7;
  if (!this->_internal_ship().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ship());
  }

  // string preface = 8;
  if (!this->_internal_preface().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preface());
  }

  // string chart_data = 9;
  if (!this->_internal_chart_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chart_data());
  }

  // bool status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestStatisticsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestStatisticsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestStatisticsResponse::GetClassData() const { return &_class_data_; }


void RequestStatisticsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestStatisticsResponse*>(&to_msg);
  auto& from = static_cast<const RequestStatisticsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RequestStatisticsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_errorpoint().empty()) {
    _this->_internal_set_errorpoint(from._internal_errorpoint());
  }
  if (!from._internal_dt().empty()) {
    _this->_internal_set_dt(from._internal_dt());
  }
  if (!from._internal_auv().empty()) {
    _this->_internal_set_auv(from._internal_auv());
  }
  if (!from._internal_hov().empty()) {
    _this->_internal_set_hov(from._internal_hov());
  }
  if (!from._internal_ship().empty()) {
    _this->_internal_set_ship(from._internal_ship());
  }
  if (!from._internal_preface().empty()) {
    _this->_internal_set_preface(from._internal_preface());
  }
  if (!from._internal_chart_data().empty()) {
    _this->_internal_set_chart_data(from._internal_chart_data());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestStatisticsResponse::CopyFrom(const RequestStatisticsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestStatisticsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStatisticsResponse::IsInitialized() const {
  return true;
}

void RequestStatisticsResponse::InternalSwap(RequestStatisticsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.errorpoint_, lhs_arena,
      &other->_impl_.errorpoint_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dt_, lhs_arena,
      &other->_impl_.dt_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.auv_, lhs_arena,
      &other->_impl_.auv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hov_, lhs_arena,
      &other->_impl_.hov_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ship_, lhs_arena,
      &other->_impl_.ship_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preface_, lhs_arena,
      &other->_impl_.preface_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chart_data_, lhs_arena,
      &other->_impl_.chart_data_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestStatisticsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_sidescansource_2eproto_getter, &descriptor_table_sidescansource_2eproto_once,
      file_level_metadata_sidescansource_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SideScanSource*
Arena::CreateMaybeMessage< ::SideScanSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SideScanSource >(arena);
}
template<> PROTOBUF_NOINLINE ::SideScanSourceList*
Arena::CreateMaybeMessage< ::SideScanSourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SideScanSourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::StatusResponse*
Arena::CreateMaybeMessage< ::StatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::StatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CruiseRouteSource*
Arena::CreateMaybeMessage< ::CruiseRouteSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CruiseRouteSource >(arena);
}
template<> PROTOBUF_NOINLINE ::CruiseRouteSourceList*
Arena::CreateMaybeMessage< ::CruiseRouteSourceList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CruiseRouteSourceList >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchFilterParamter*
Arena::CreateMaybeMessage< ::SearchFilterParamter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchFilterParamter >(arena);
}
template<> PROTOBUF_NOINLINE ::SearchFilterParamterList*
Arena::CreateMaybeMessage< ::SearchFilterParamterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SearchFilterParamterList >(arena);
}
template<> PROTOBUF_NOINLINE ::FilterSearchParameter*
Arena::CreateMaybeMessage< ::FilterSearchParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::FilterSearchParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::KeywordSearchParameter*
Arena::CreateMaybeMessage< ::KeywordSearchParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KeywordSearchParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestTrajectory*
Arena::CreateMaybeMessage< ::RequestTrajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestTrajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestTrajectoryResponse*
Arena::CreateMaybeMessage< ::RequestTrajectoryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestTrajectoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestStatistics*
Arena::CreateMaybeMessage< ::RequestStatistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::RequestStatisticsResponse*
Arena::CreateMaybeMessage< ::RequestStatisticsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RequestStatisticsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
