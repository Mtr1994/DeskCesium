// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sidescansource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sidescansource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sidescansource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sidescansource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sidescansource_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sidescansource_2eproto;
class CruiseRouteSource;
struct CruiseRouteSourceDefaultTypeInternal;
extern CruiseRouteSourceDefaultTypeInternal _CruiseRouteSource_default_instance_;
class CruiseRouteSourceList;
struct CruiseRouteSourceListDefaultTypeInternal;
extern CruiseRouteSourceListDefaultTypeInternal _CruiseRouteSourceList_default_instance_;
class SearchFilterParamter;
struct SearchFilterParamterDefaultTypeInternal;
extern SearchFilterParamterDefaultTypeInternal _SearchFilterParamter_default_instance_;
class SearchFilterParamterList;
struct SearchFilterParamterListDefaultTypeInternal;
extern SearchFilterParamterListDefaultTypeInternal _SearchFilterParamterList_default_instance_;
class SearchParameter;
struct SearchParameterDefaultTypeInternal;
extern SearchParameterDefaultTypeInternal _SearchParameter_default_instance_;
class SideScanSource;
struct SideScanSourceDefaultTypeInternal;
extern SideScanSourceDefaultTypeInternal _SideScanSource_default_instance_;
class SideScanSourceList;
struct SideScanSourceListDefaultTypeInternal;
extern SideScanSourceListDefaultTypeInternal _SideScanSourceList_default_instance_;
class StatusResponse;
struct StatusResponseDefaultTypeInternal;
extern StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CruiseRouteSource* Arena::CreateMaybeMessage<::CruiseRouteSource>(Arena*);
template<> ::CruiseRouteSourceList* Arena::CreateMaybeMessage<::CruiseRouteSourceList>(Arena*);
template<> ::SearchFilterParamter* Arena::CreateMaybeMessage<::SearchFilterParamter>(Arena*);
template<> ::SearchFilterParamterList* Arena::CreateMaybeMessage<::SearchFilterParamterList>(Arena*);
template<> ::SearchParameter* Arena::CreateMaybeMessage<::SearchParameter>(Arena*);
template<> ::SideScanSource* Arena::CreateMaybeMessage<::SideScanSource>(Arena*);
template<> ::SideScanSourceList* Arena::CreateMaybeMessage<::SideScanSourceList>(Arena*);
template<> ::StatusResponse* Arena::CreateMaybeMessage<::StatusResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SideScanSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SideScanSource) */ {
 public:
  inline SideScanSource() : SideScanSource(nullptr) {}
  ~SideScanSource() override;
  explicit PROTOBUF_CONSTEXPR SideScanSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SideScanSource(const SideScanSource& from);
  SideScanSource(SideScanSource&& from) noexcept
    : SideScanSource() {
    *this = ::std::move(from);
  }

  inline SideScanSource& operator=(const SideScanSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideScanSource& operator=(SideScanSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SideScanSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const SideScanSource* internal_default_instance() {
    return reinterpret_cast<const SideScanSource*>(
               &_SideScanSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SideScanSource& a, SideScanSource& b) {
    a.Swap(&b);
  }
  inline void Swap(SideScanSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideScanSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SideScanSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SideScanSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SideScanSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SideScanSource& from) {
    SideScanSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideScanSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SideScanSource";
  }
  protected:
  explicit SideScanSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kCruiseNumberFieldNumber = 2,
    kDiveNumberFieldNumber = 3,
    kScanLineFieldNumber = 4,
    kCruiseYearFieldNumber = 5,
    kDtTimeFieldNumber = 6,
    kHorizontalRangeDirectionFieldNumber = 10,
    kHorizontalRangeValueFieldNumber = 11,
    kSideScanImageNameFieldNumber = 14,
    kRemarksFieldNumber = 22,
    kSupposeSizeFieldNumber = 23,
    kVerifyAuvSssImagePathsFieldNumber = 25,
    kVerifyImagePathsFieldNumber = 26,
    kImageDescriptionFieldNumber = 27,
    kTargetLongitudeFieldNumber = 28,
    kTargetLatitudeFieldNumber = 29,
    kPositionErrorFieldNumber = 30,
    kVerifyCruiseNumberFieldNumber = 31,
    kVerifyDiveNumberFieldNumber = 32,
    kVerifyTimeFieldNumber = 33,
    kLongitudeFieldNumber = 7,
    kLatitudeFieldNumber = 8,
    kDtSpeedFieldNumber = 9,
    kHeightFromBottomFieldNumber = 12,
    kImageTopLeftLongitudeFieldNumber = 15,
    kImageTopLeftLatitudeFieldNumber = 16,
    kRThetaFieldNumber = 13,
    kImageTotalByteFieldNumber = 19,
    kImageBottomRightLongitudeFieldNumber = 17,
    kImageBottomRightLatitudeFieldNumber = 18,
    kAlongTrackFieldNumber = 20,
    kAcrossTrackFieldNumber = 21,
    kPriorityFieldNumber = 24,
    kVerifyFlagFieldNumber = 34,
    kStatusFlagFieldNumber = 35,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string cruise_number = 2;
  void clear_cruise_number();
  const std::string& cruise_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise_number();
  PROTOBUF_NODISCARD std::string* release_cruise_number();
  void set_allocated_cruise_number(std::string* cruise_number);
  private:
  const std::string& _internal_cruise_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise_number(const std::string& value);
  std::string* _internal_mutable_cruise_number();
  public:

  // string dive_number = 3;
  void clear_dive_number();
  const std::string& dive_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dive_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dive_number();
  PROTOBUF_NODISCARD std::string* release_dive_number();
  void set_allocated_dive_number(std::string* dive_number);
  private:
  const std::string& _internal_dive_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dive_number(const std::string& value);
  std::string* _internal_mutable_dive_number();
  public:

  // string scan_line = 4;
  void clear_scan_line();
  const std::string& scan_line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scan_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scan_line();
  PROTOBUF_NODISCARD std::string* release_scan_line();
  void set_allocated_scan_line(std::string* scan_line);
  private:
  const std::string& _internal_scan_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scan_line(const std::string& value);
  std::string* _internal_mutable_scan_line();
  public:

  // string cruise_year = 5;
  void clear_cruise_year();
  const std::string& cruise_year() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise_year(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise_year();
  PROTOBUF_NODISCARD std::string* release_cruise_year();
  void set_allocated_cruise_year(std::string* cruise_year);
  private:
  const std::string& _internal_cruise_year() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise_year(const std::string& value);
  std::string* _internal_mutable_cruise_year();
  public:

  // string dt_time = 6;
  void clear_dt_time();
  const std::string& dt_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dt_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dt_time();
  PROTOBUF_NODISCARD std::string* release_dt_time();
  void set_allocated_dt_time(std::string* dt_time);
  private:
  const std::string& _internal_dt_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dt_time(const std::string& value);
  std::string* _internal_mutable_dt_time();
  public:

  // string horizontal_range_direction = 10;
  void clear_horizontal_range_direction();
  const std::string& horizontal_range_direction() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_horizontal_range_direction(ArgT0&& arg0, ArgT... args);
  std::string* mutable_horizontal_range_direction();
  PROTOBUF_NODISCARD std::string* release_horizontal_range_direction();
  void set_allocated_horizontal_range_direction(std::string* horizontal_range_direction);
  private:
  const std::string& _internal_horizontal_range_direction() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_horizontal_range_direction(const std::string& value);
  std::string* _internal_mutable_horizontal_range_direction();
  public:

  // string horizontal_range_value = 11;
  void clear_horizontal_range_value();
  const std::string& horizontal_range_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_horizontal_range_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_horizontal_range_value();
  PROTOBUF_NODISCARD std::string* release_horizontal_range_value();
  void set_allocated_horizontal_range_value(std::string* horizontal_range_value);
  private:
  const std::string& _internal_horizontal_range_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_horizontal_range_value(const std::string& value);
  std::string* _internal_mutable_horizontal_range_value();
  public:

  // string side_scan_image_name = 14;
  void clear_side_scan_image_name();
  const std::string& side_scan_image_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_side_scan_image_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_side_scan_image_name();
  PROTOBUF_NODISCARD std::string* release_side_scan_image_name();
  void set_allocated_side_scan_image_name(std::string* side_scan_image_name);
  private:
  const std::string& _internal_side_scan_image_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side_scan_image_name(const std::string& value);
  std::string* _internal_mutable_side_scan_image_name();
  public:

  // string remarks = 22;
  void clear_remarks();
  const std::string& remarks() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_remarks(ArgT0&& arg0, ArgT... args);
  std::string* mutable_remarks();
  PROTOBUF_NODISCARD std::string* release_remarks();
  void set_allocated_remarks(std::string* remarks);
  private:
  const std::string& _internal_remarks() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_remarks(const std::string& value);
  std::string* _internal_mutable_remarks();
  public:

  // string suppose_size = 23;
  void clear_suppose_size();
  const std::string& suppose_size() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_suppose_size(ArgT0&& arg0, ArgT... args);
  std::string* mutable_suppose_size();
  PROTOBUF_NODISCARD std::string* release_suppose_size();
  void set_allocated_suppose_size(std::string* suppose_size);
  private:
  const std::string& _internal_suppose_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_suppose_size(const std::string& value);
  std::string* _internal_mutable_suppose_size();
  public:

  // string verify_auv_sss_image_paths = 25;
  void clear_verify_auv_sss_image_paths();
  const std::string& verify_auv_sss_image_paths() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_auv_sss_image_paths(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_auv_sss_image_paths();
  PROTOBUF_NODISCARD std::string* release_verify_auv_sss_image_paths();
  void set_allocated_verify_auv_sss_image_paths(std::string* verify_auv_sss_image_paths);
  private:
  const std::string& _internal_verify_auv_sss_image_paths() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_auv_sss_image_paths(const std::string& value);
  std::string* _internal_mutable_verify_auv_sss_image_paths();
  public:

  // string verify_image_paths = 26;
  void clear_verify_image_paths();
  const std::string& verify_image_paths() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_image_paths(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_image_paths();
  PROTOBUF_NODISCARD std::string* release_verify_image_paths();
  void set_allocated_verify_image_paths(std::string* verify_image_paths);
  private:
  const std::string& _internal_verify_image_paths() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_image_paths(const std::string& value);
  std::string* _internal_mutable_verify_image_paths();
  public:

  // string image_description = 27;
  void clear_image_description();
  const std::string& image_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image_description();
  PROTOBUF_NODISCARD std::string* release_image_description();
  void set_allocated_image_description(std::string* image_description);
  private:
  const std::string& _internal_image_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_description(const std::string& value);
  std::string* _internal_mutable_image_description();
  public:

  // string target_longitude = 28;
  void clear_target_longitude();
  const std::string& target_longitude() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_longitude(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_longitude();
  PROTOBUF_NODISCARD std::string* release_target_longitude();
  void set_allocated_target_longitude(std::string* target_longitude);
  private:
  const std::string& _internal_target_longitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_longitude(const std::string& value);
  std::string* _internal_mutable_target_longitude();
  public:

  // string target_latitude = 29;
  void clear_target_latitude();
  const std::string& target_latitude() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_latitude(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_latitude();
  PROTOBUF_NODISCARD std::string* release_target_latitude();
  void set_allocated_target_latitude(std::string* target_latitude);
  private:
  const std::string& _internal_target_latitude() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_latitude(const std::string& value);
  std::string* _internal_mutable_target_latitude();
  public:

  // string position_error = 30;
  void clear_position_error();
  const std::string& position_error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_position_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_position_error();
  PROTOBUF_NODISCARD std::string* release_position_error();
  void set_allocated_position_error(std::string* position_error);
  private:
  const std::string& _internal_position_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_position_error(const std::string& value);
  std::string* _internal_mutable_position_error();
  public:

  // string verify_cruise_number = 31;
  void clear_verify_cruise_number();
  const std::string& verify_cruise_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_cruise_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_cruise_number();
  PROTOBUF_NODISCARD std::string* release_verify_cruise_number();
  void set_allocated_verify_cruise_number(std::string* verify_cruise_number);
  private:
  const std::string& _internal_verify_cruise_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_cruise_number(const std::string& value);
  std::string* _internal_mutable_verify_cruise_number();
  public:

  // string verify_dive_number = 32;
  void clear_verify_dive_number();
  const std::string& verify_dive_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_dive_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_dive_number();
  PROTOBUF_NODISCARD std::string* release_verify_dive_number();
  void set_allocated_verify_dive_number(std::string* verify_dive_number);
  private:
  const std::string& _internal_verify_dive_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_dive_number(const std::string& value);
  std::string* _internal_mutable_verify_dive_number();
  public:

  // string verify_time = 33;
  void clear_verify_time();
  const std::string& verify_time() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_time(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_time();
  PROTOBUF_NODISCARD std::string* release_verify_time();
  void set_allocated_verify_time(std::string* verify_time);
  private:
  const std::string& _internal_verify_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_time(const std::string& value);
  std::string* _internal_mutable_verify_time();
  public:

  // double longitude = 7;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 8;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // float dt_speed = 9;
  void clear_dt_speed();
  float dt_speed() const;
  void set_dt_speed(float value);
  private:
  float _internal_dt_speed() const;
  void _internal_set_dt_speed(float value);
  public:

  // float height_from_bottom = 12;
  void clear_height_from_bottom();
  float height_from_bottom() const;
  void set_height_from_bottom(float value);
  private:
  float _internal_height_from_bottom() const;
  void _internal_set_height_from_bottom(float value);
  public:

  // double image_top_left_longitude = 15;
  void clear_image_top_left_longitude();
  double image_top_left_longitude() const;
  void set_image_top_left_longitude(double value);
  private:
  double _internal_image_top_left_longitude() const;
  void _internal_set_image_top_left_longitude(double value);
  public:

  // double image_top_left_latitude = 16;
  void clear_image_top_left_latitude();
  double image_top_left_latitude() const;
  void set_image_top_left_latitude(double value);
  private:
  double _internal_image_top_left_latitude() const;
  void _internal_set_image_top_left_latitude(double value);
  public:

  // float r_theta = 13;
  void clear_r_theta();
  float r_theta() const;
  void set_r_theta(float value);
  private:
  float _internal_r_theta() const;
  void _internal_set_r_theta(float value);
  public:

  // uint32 image_total_byte = 19;
  void clear_image_total_byte();
  uint32_t image_total_byte() const;
  void set_image_total_byte(uint32_t value);
  private:
  uint32_t _internal_image_total_byte() const;
  void _internal_set_image_total_byte(uint32_t value);
  public:

  // double image_bottom_right_longitude = 17;
  void clear_image_bottom_right_longitude();
  double image_bottom_right_longitude() const;
  void set_image_bottom_right_longitude(double value);
  private:
  double _internal_image_bottom_right_longitude() const;
  void _internal_set_image_bottom_right_longitude(double value);
  public:

  // double image_bottom_right_latitude = 18;
  void clear_image_bottom_right_latitude();
  double image_bottom_right_latitude() const;
  void set_image_bottom_right_latitude(double value);
  private:
  double _internal_image_bottom_right_latitude() const;
  void _internal_set_image_bottom_right_latitude(double value);
  public:

  // float along_track = 20;
  void clear_along_track();
  float along_track() const;
  void set_along_track(float value);
  private:
  float _internal_along_track() const;
  void _internal_set_along_track(float value);
  public:

  // float across_track = 21;
  void clear_across_track();
  float across_track() const;
  void set_across_track(float value);
  private:
  float _internal_across_track() const;
  void _internal_set_across_track(float value);
  public:

  // uint32 priority = 24;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // bool verify_flag = 34;
  void clear_verify_flag();
  bool verify_flag() const;
  void set_verify_flag(bool value);
  private:
  bool _internal_verify_flag() const;
  void _internal_set_verify_flag(bool value);
  public:

  // uint32 status_flag = 35;
  void clear_status_flag();
  uint32_t status_flag() const;
  void set_status_flag(uint32_t value);
  private:
  uint32_t _internal_status_flag() const;
  void _internal_set_status_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SideScanSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dive_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scan_line_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_year_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dt_time_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr horizontal_range_direction_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr horizontal_range_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr side_scan_image_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remarks_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr suppose_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_auv_sss_image_paths_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_image_paths_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_description_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_longitude_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_latitude_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr position_error_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_cruise_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_dive_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_time_;
    double longitude_;
    double latitude_;
    float dt_speed_;
    float height_from_bottom_;
    double image_top_left_longitude_;
    double image_top_left_latitude_;
    float r_theta_;
    uint32_t image_total_byte_;
    double image_bottom_right_longitude_;
    double image_bottom_right_latitude_;
    float along_track_;
    float across_track_;
    uint32_t priority_;
    bool verify_flag_;
    uint32_t status_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class SideScanSourceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SideScanSourceList) */ {
 public:
  inline SideScanSourceList() : SideScanSourceList(nullptr) {}
  ~SideScanSourceList() override;
  explicit PROTOBUF_CONSTEXPR SideScanSourceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SideScanSourceList(const SideScanSourceList& from);
  SideScanSourceList(SideScanSourceList&& from) noexcept
    : SideScanSourceList() {
    *this = ::std::move(from);
  }

  inline SideScanSourceList& operator=(const SideScanSourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SideScanSourceList& operator=(SideScanSourceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SideScanSourceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SideScanSourceList* internal_default_instance() {
    return reinterpret_cast<const SideScanSourceList*>(
               &_SideScanSourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SideScanSourceList& a, SideScanSourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(SideScanSourceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SideScanSourceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SideScanSourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SideScanSourceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SideScanSourceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SideScanSourceList& from) {
    SideScanSourceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SideScanSourceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SideScanSourceList";
  }
  protected:
  explicit SideScanSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .SideScanSource list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::SideScanSource* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SideScanSource >*
      mutable_list();
  private:
  const ::SideScanSource& _internal_list(int index) const;
  ::SideScanSource* _internal_add_list();
  public:
  const ::SideScanSource& list(int index) const;
  ::SideScanSource* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SideScanSource >&
      list() const;

  // @@protoc_insertion_point(class_scope:SideScanSourceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SideScanSource > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class StatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StatusResponse) */ {
 public:
  inline StatusResponse() : StatusResponse(nullptr) {}
  ~StatusResponse() override;
  explicit PROTOBUF_CONSTEXPR StatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusResponse(const StatusResponse& from);
  StatusResponse(StatusResponse&& from) noexcept
    : StatusResponse() {
    *this = ::std::move(from);
  }

  inline StatusResponse& operator=(const StatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusResponse& operator=(StatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusResponse* internal_default_instance() {
    return reinterpret_cast<const StatusResponse*>(
               &_StatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StatusResponse& a, StatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StatusResponse& from) {
    StatusResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StatusResponse";
  }
  protected:
  explicit StatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    bool status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class CruiseRouteSource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CruiseRouteSource) */ {
 public:
  inline CruiseRouteSource() : CruiseRouteSource(nullptr) {}
  ~CruiseRouteSource() override;
  explicit PROTOBUF_CONSTEXPR CruiseRouteSource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CruiseRouteSource(const CruiseRouteSource& from);
  CruiseRouteSource(CruiseRouteSource&& from) noexcept
    : CruiseRouteSource() {
    *this = ::std::move(from);
  }

  inline CruiseRouteSource& operator=(const CruiseRouteSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CruiseRouteSource& operator=(CruiseRouteSource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CruiseRouteSource& default_instance() {
    return *internal_default_instance();
  }
  static inline const CruiseRouteSource* internal_default_instance() {
    return reinterpret_cast<const CruiseRouteSource*>(
               &_CruiseRouteSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CruiseRouteSource& a, CruiseRouteSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CruiseRouteSource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CruiseRouteSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CruiseRouteSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CruiseRouteSource>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CruiseRouteSource& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CruiseRouteSource& from) {
    CruiseRouteSource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CruiseRouteSource* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CruiseRouteSource";
  }
  protected:
  explicit CruiseRouteSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCruiseFieldNumber = 1,
    kTypeFieldNumber = 2,
    kNameFieldNumber = 3,
    kStatusFlagFieldNumber = 29,
  };
  // string cruise = 1;
  void clear_cruise();
  const std::string& cruise() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise();
  PROTOBUF_NODISCARD std::string* release_cruise();
  void set_allocated_cruise(std::string* cruise);
  private:
  const std::string& _internal_cruise() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise(const std::string& value);
  std::string* _internal_mutable_cruise();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 status_flag = 29;
  void clear_status_flag();
  uint32_t status_flag() const;
  void set_status_flag(uint32_t value);
  private:
  uint32_t _internal_status_flag() const;
  void _internal_set_status_flag(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CruiseRouteSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t status_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class CruiseRouteSourceList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CruiseRouteSourceList) */ {
 public:
  inline CruiseRouteSourceList() : CruiseRouteSourceList(nullptr) {}
  ~CruiseRouteSourceList() override;
  explicit PROTOBUF_CONSTEXPR CruiseRouteSourceList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CruiseRouteSourceList(const CruiseRouteSourceList& from);
  CruiseRouteSourceList(CruiseRouteSourceList&& from) noexcept
    : CruiseRouteSourceList() {
    *this = ::std::move(from);
  }

  inline CruiseRouteSourceList& operator=(const CruiseRouteSourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CruiseRouteSourceList& operator=(CruiseRouteSourceList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CruiseRouteSourceList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CruiseRouteSourceList* internal_default_instance() {
    return reinterpret_cast<const CruiseRouteSourceList*>(
               &_CruiseRouteSourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CruiseRouteSourceList& a, CruiseRouteSourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(CruiseRouteSourceList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CruiseRouteSourceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CruiseRouteSourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CruiseRouteSourceList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CruiseRouteSourceList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CruiseRouteSourceList& from) {
    CruiseRouteSourceList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CruiseRouteSourceList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CruiseRouteSourceList";
  }
  protected:
  explicit CruiseRouteSourceList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .CruiseRouteSource list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::CruiseRouteSource* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CruiseRouteSource >*
      mutable_list();
  private:
  const ::CruiseRouteSource& _internal_list(int index) const;
  ::CruiseRouteSource* _internal_add_list();
  public:
  const ::CruiseRouteSource& list(int index) const;
  ::CruiseRouteSource* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CruiseRouteSource >&
      list() const;

  // @@protoc_insertion_point(class_scope:CruiseRouteSourceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CruiseRouteSource > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class SearchFilterParamter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchFilterParamter) */ {
 public:
  inline SearchFilterParamter() : SearchFilterParamter(nullptr) {}
  ~SearchFilterParamter() override;
  explicit PROTOBUF_CONSTEXPR SearchFilterParamter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchFilterParamter(const SearchFilterParamter& from);
  SearchFilterParamter(SearchFilterParamter&& from) noexcept
    : SearchFilterParamter() {
    *this = ::std::move(from);
  }

  inline SearchFilterParamter& operator=(const SearchFilterParamter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchFilterParamter& operator=(SearchFilterParamter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchFilterParamter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchFilterParamter* internal_default_instance() {
    return reinterpret_cast<const SearchFilterParamter*>(
               &_SearchFilterParamter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchFilterParamter& a, SearchFilterParamter& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchFilterParamter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchFilterParamter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchFilterParamter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchFilterParamter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchFilterParamter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchFilterParamter& from) {
    SearchFilterParamter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchFilterParamter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchFilterParamter";
  }
  protected:
  explicit SearchFilterParamter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCruiseYearFieldNumber = 1,
    kCruiseNumberFieldNumber = 2,
    kDiveNumberFieldNumber = 3,
    kVerifyDiveNumberFieldNumber = 4,
  };
  // string cruise_year = 1;
  void clear_cruise_year();
  const std::string& cruise_year() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise_year(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise_year();
  PROTOBUF_NODISCARD std::string* release_cruise_year();
  void set_allocated_cruise_year(std::string* cruise_year);
  private:
  const std::string& _internal_cruise_year() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise_year(const std::string& value);
  std::string* _internal_mutable_cruise_year();
  public:

  // string cruise_number = 2;
  void clear_cruise_number();
  const std::string& cruise_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise_number();
  PROTOBUF_NODISCARD std::string* release_cruise_number();
  void set_allocated_cruise_number(std::string* cruise_number);
  private:
  const std::string& _internal_cruise_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise_number(const std::string& value);
  std::string* _internal_mutable_cruise_number();
  public:

  // string dive_number = 3;
  void clear_dive_number();
  const std::string& dive_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dive_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dive_number();
  PROTOBUF_NODISCARD std::string* release_dive_number();
  void set_allocated_dive_number(std::string* dive_number);
  private:
  const std::string& _internal_dive_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dive_number(const std::string& value);
  std::string* _internal_mutable_dive_number();
  public:

  // string verify_dive_number = 4;
  void clear_verify_dive_number();
  const std::string& verify_dive_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_dive_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_dive_number();
  PROTOBUF_NODISCARD std::string* release_verify_dive_number();
  void set_allocated_verify_dive_number(std::string* verify_dive_number);
  private:
  const std::string& _internal_verify_dive_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_dive_number(const std::string& value);
  std::string* _internal_mutable_verify_dive_number();
  public:

  // @@protoc_insertion_point(class_scope:SearchFilterParamter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_year_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dive_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_dive_number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class SearchFilterParamterList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchFilterParamterList) */ {
 public:
  inline SearchFilterParamterList() : SearchFilterParamterList(nullptr) {}
  ~SearchFilterParamterList() override;
  explicit PROTOBUF_CONSTEXPR SearchFilterParamterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchFilterParamterList(const SearchFilterParamterList& from);
  SearchFilterParamterList(SearchFilterParamterList&& from) noexcept
    : SearchFilterParamterList() {
    *this = ::std::move(from);
  }

  inline SearchFilterParamterList& operator=(const SearchFilterParamterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchFilterParamterList& operator=(SearchFilterParamterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchFilterParamterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchFilterParamterList* internal_default_instance() {
    return reinterpret_cast<const SearchFilterParamterList*>(
               &_SearchFilterParamterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchFilterParamterList& a, SearchFilterParamterList& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchFilterParamterList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchFilterParamterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchFilterParamterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchFilterParamterList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchFilterParamterList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchFilterParamterList& from) {
    SearchFilterParamterList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchFilterParamterList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchFilterParamterList";
  }
  protected:
  explicit SearchFilterParamterList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .SearchFilterParamter list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::SearchFilterParamter* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchFilterParamter >*
      mutable_list();
  private:
  const ::SearchFilterParamter& _internal_list(int index) const;
  ::SearchFilterParamter* _internal_add_list();
  public:
  const ::SearchFilterParamter& list(int index) const;
  ::SearchFilterParamter* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchFilterParamter >&
      list() const;

  // @@protoc_insertion_point(class_scope:SearchFilterParamterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchFilterParamter > list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// -------------------------------------------------------------------

class SearchParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchParameter) */ {
 public:
  inline SearchParameter() : SearchParameter(nullptr) {}
  ~SearchParameter() override;
  explicit PROTOBUF_CONSTEXPR SearchParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchParameter(const SearchParameter& from);
  SearchParameter(SearchParameter&& from) noexcept
    : SearchParameter() {
    *this = ::std::move(from);
  }

  inline SearchParameter& operator=(const SearchParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchParameter& operator=(SearchParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchParameter* internal_default_instance() {
    return reinterpret_cast<const SearchParameter*>(
               &_SearchParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SearchParameter& a, SearchParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchParameter& from) {
    SearchParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchParameter";
  }
  protected:
  explicit SearchParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerifyDiveNumberFieldNumber = 4,
    kCruiseYearFieldNumber = 1,
    kCruiseNumberFieldNumber = 2,
    kDiveNumberFieldNumber = 3,
    kPriorityFieldNumber = 5,
    kVerifyFlagFieldNumber = 6,
  };
  // repeated string verify_dive_number = 4;
  int verify_dive_number_size() const;
  private:
  int _internal_verify_dive_number_size() const;
  public:
  void clear_verify_dive_number();
  const std::string& verify_dive_number(int index) const;
  std::string* mutable_verify_dive_number(int index);
  void set_verify_dive_number(int index, const std::string& value);
  void set_verify_dive_number(int index, std::string&& value);
  void set_verify_dive_number(int index, const char* value);
  void set_verify_dive_number(int index, const char* value, size_t size);
  std::string* add_verify_dive_number();
  void add_verify_dive_number(const std::string& value);
  void add_verify_dive_number(std::string&& value);
  void add_verify_dive_number(const char* value);
  void add_verify_dive_number(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& verify_dive_number() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_verify_dive_number();
  private:
  const std::string& _internal_verify_dive_number(int index) const;
  std::string* _internal_add_verify_dive_number();
  public:

  // string cruise_year = 1;
  void clear_cruise_year();
  const std::string& cruise_year() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise_year(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise_year();
  PROTOBUF_NODISCARD std::string* release_cruise_year();
  void set_allocated_cruise_year(std::string* cruise_year);
  private:
  const std::string& _internal_cruise_year() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise_year(const std::string& value);
  std::string* _internal_mutable_cruise_year();
  public:

  // string cruise_number = 2;
  void clear_cruise_number();
  const std::string& cruise_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cruise_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cruise_number();
  PROTOBUF_NODISCARD std::string* release_cruise_number();
  void set_allocated_cruise_number(std::string* cruise_number);
  private:
  const std::string& _internal_cruise_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cruise_number(const std::string& value);
  std::string* _internal_mutable_cruise_number();
  public:

  // string dive_number = 3;
  void clear_dive_number();
  const std::string& dive_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dive_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dive_number();
  PROTOBUF_NODISCARD std::string* release_dive_number();
  void set_allocated_dive_number(std::string* dive_number);
  private:
  const std::string& _internal_dive_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dive_number(const std::string& value);
  std::string* _internal_mutable_dive_number();
  public:

  // string priority = 5;
  void clear_priority();
  const std::string& priority() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_priority(ArgT0&& arg0, ArgT... args);
  std::string* mutable_priority();
  PROTOBUF_NODISCARD std::string* release_priority();
  void set_allocated_priority(std::string* priority);
  private:
  const std::string& _internal_priority() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_priority(const std::string& value);
  std::string* _internal_mutable_priority();
  public:

  // string verify_flag = 6;
  void clear_verify_flag();
  const std::string& verify_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verify_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verify_flag();
  PROTOBUF_NODISCARD std::string* release_verify_flag();
  void set_allocated_verify_flag(std::string* verify_flag);
  private:
  const std::string& _internal_verify_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verify_flag(const std::string& value);
  std::string* _internal_mutable_verify_flag();
  public:

  // @@protoc_insertion_point(class_scope:SearchParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> verify_dive_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_year_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cruise_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dive_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr priority_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verify_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sidescansource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SideScanSource

// string id = 1;
inline void SideScanSource::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& SideScanSource::id() const {
  // @@protoc_insertion_point(field_get:SideScanSource.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.id)
}
inline std::string* SideScanSource::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:SideScanSource.id)
  return _s;
}
inline const std::string& SideScanSource::_internal_id() const {
  return _impl_.id_.Get();
}
inline void SideScanSource::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_id() {
  // @@protoc_insertion_point(field_release:SideScanSource.id)
  return _impl_.id_.Release();
}
inline void SideScanSource::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.id)
}

// string cruise_number = 2;
inline void SideScanSource::clear_cruise_number() {
  _impl_.cruise_number_.ClearToEmpty();
}
inline const std::string& SideScanSource::cruise_number() const {
  // @@protoc_insertion_point(field_get:SideScanSource.cruise_number)
  return _internal_cruise_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_cruise_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.cruise_number)
}
inline std::string* SideScanSource::mutable_cruise_number() {
  std::string* _s = _internal_mutable_cruise_number();
  // @@protoc_insertion_point(field_mutable:SideScanSource.cruise_number)
  return _s;
}
inline const std::string& SideScanSource::_internal_cruise_number() const {
  return _impl_.cruise_number_.Get();
}
inline void SideScanSource::_internal_set_cruise_number(const std::string& value) {
  
  _impl_.cruise_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_cruise_number() {
  
  return _impl_.cruise_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_cruise_number() {
  // @@protoc_insertion_point(field_release:SideScanSource.cruise_number)
  return _impl_.cruise_number_.Release();
}
inline void SideScanSource::set_allocated_cruise_number(std::string* cruise_number) {
  if (cruise_number != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_number_.SetAllocated(cruise_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_number_.IsDefault()) {
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.cruise_number)
}

// string dive_number = 3;
inline void SideScanSource::clear_dive_number() {
  _impl_.dive_number_.ClearToEmpty();
}
inline const std::string& SideScanSource::dive_number() const {
  // @@protoc_insertion_point(field_get:SideScanSource.dive_number)
  return _internal_dive_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_dive_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dive_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.dive_number)
}
inline std::string* SideScanSource::mutable_dive_number() {
  std::string* _s = _internal_mutable_dive_number();
  // @@protoc_insertion_point(field_mutable:SideScanSource.dive_number)
  return _s;
}
inline const std::string& SideScanSource::_internal_dive_number() const {
  return _impl_.dive_number_.Get();
}
inline void SideScanSource::_internal_set_dive_number(const std::string& value) {
  
  _impl_.dive_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_dive_number() {
  
  return _impl_.dive_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_dive_number() {
  // @@protoc_insertion_point(field_release:SideScanSource.dive_number)
  return _impl_.dive_number_.Release();
}
inline void SideScanSource::set_allocated_dive_number(std::string* dive_number) {
  if (dive_number != nullptr) {
    
  } else {
    
  }
  _impl_.dive_number_.SetAllocated(dive_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dive_number_.IsDefault()) {
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.dive_number)
}

// string scan_line = 4;
inline void SideScanSource::clear_scan_line() {
  _impl_.scan_line_.ClearToEmpty();
}
inline const std::string& SideScanSource::scan_line() const {
  // @@protoc_insertion_point(field_get:SideScanSource.scan_line)
  return _internal_scan_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_scan_line(ArgT0&& arg0, ArgT... args) {
 
 _impl_.scan_line_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.scan_line)
}
inline std::string* SideScanSource::mutable_scan_line() {
  std::string* _s = _internal_mutable_scan_line();
  // @@protoc_insertion_point(field_mutable:SideScanSource.scan_line)
  return _s;
}
inline const std::string& SideScanSource::_internal_scan_line() const {
  return _impl_.scan_line_.Get();
}
inline void SideScanSource::_internal_set_scan_line(const std::string& value) {
  
  _impl_.scan_line_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_scan_line() {
  
  return _impl_.scan_line_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_scan_line() {
  // @@protoc_insertion_point(field_release:SideScanSource.scan_line)
  return _impl_.scan_line_.Release();
}
inline void SideScanSource::set_allocated_scan_line(std::string* scan_line) {
  if (scan_line != nullptr) {
    
  } else {
    
  }
  _impl_.scan_line_.SetAllocated(scan_line, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scan_line_.IsDefault()) {
    _impl_.scan_line_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.scan_line)
}

// string cruise_year = 5;
inline void SideScanSource::clear_cruise_year() {
  _impl_.cruise_year_.ClearToEmpty();
}
inline const std::string& SideScanSource::cruise_year() const {
  // @@protoc_insertion_point(field_get:SideScanSource.cruise_year)
  return _internal_cruise_year();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_cruise_year(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_year_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.cruise_year)
}
inline std::string* SideScanSource::mutable_cruise_year() {
  std::string* _s = _internal_mutable_cruise_year();
  // @@protoc_insertion_point(field_mutable:SideScanSource.cruise_year)
  return _s;
}
inline const std::string& SideScanSource::_internal_cruise_year() const {
  return _impl_.cruise_year_.Get();
}
inline void SideScanSource::_internal_set_cruise_year(const std::string& value) {
  
  _impl_.cruise_year_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_cruise_year() {
  
  return _impl_.cruise_year_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_cruise_year() {
  // @@protoc_insertion_point(field_release:SideScanSource.cruise_year)
  return _impl_.cruise_year_.Release();
}
inline void SideScanSource::set_allocated_cruise_year(std::string* cruise_year) {
  if (cruise_year != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_year_.SetAllocated(cruise_year, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_year_.IsDefault()) {
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.cruise_year)
}

// string dt_time = 6;
inline void SideScanSource::clear_dt_time() {
  _impl_.dt_time_.ClearToEmpty();
}
inline const std::string& SideScanSource::dt_time() const {
  // @@protoc_insertion_point(field_get:SideScanSource.dt_time)
  return _internal_dt_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_dt_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dt_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.dt_time)
}
inline std::string* SideScanSource::mutable_dt_time() {
  std::string* _s = _internal_mutable_dt_time();
  // @@protoc_insertion_point(field_mutable:SideScanSource.dt_time)
  return _s;
}
inline const std::string& SideScanSource::_internal_dt_time() const {
  return _impl_.dt_time_.Get();
}
inline void SideScanSource::_internal_set_dt_time(const std::string& value) {
  
  _impl_.dt_time_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_dt_time() {
  
  return _impl_.dt_time_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_dt_time() {
  // @@protoc_insertion_point(field_release:SideScanSource.dt_time)
  return _impl_.dt_time_.Release();
}
inline void SideScanSource::set_allocated_dt_time(std::string* dt_time) {
  if (dt_time != nullptr) {
    
  } else {
    
  }
  _impl_.dt_time_.SetAllocated(dt_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dt_time_.IsDefault()) {
    _impl_.dt_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.dt_time)
}

// double longitude = 7;
inline void SideScanSource::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double SideScanSource::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double SideScanSource::longitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.longitude)
  return _internal_longitude();
}
inline void SideScanSource::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void SideScanSource::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:SideScanSource.longitude)
}

// double latitude = 8;
inline void SideScanSource::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double SideScanSource::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double SideScanSource::latitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.latitude)
  return _internal_latitude();
}
inline void SideScanSource::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void SideScanSource::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:SideScanSource.latitude)
}

// float dt_speed = 9;
inline void SideScanSource::clear_dt_speed() {
  _impl_.dt_speed_ = 0;
}
inline float SideScanSource::_internal_dt_speed() const {
  return _impl_.dt_speed_;
}
inline float SideScanSource::dt_speed() const {
  // @@protoc_insertion_point(field_get:SideScanSource.dt_speed)
  return _internal_dt_speed();
}
inline void SideScanSource::_internal_set_dt_speed(float value) {
  
  _impl_.dt_speed_ = value;
}
inline void SideScanSource::set_dt_speed(float value) {
  _internal_set_dt_speed(value);
  // @@protoc_insertion_point(field_set:SideScanSource.dt_speed)
}

// string horizontal_range_direction = 10;
inline void SideScanSource::clear_horizontal_range_direction() {
  _impl_.horizontal_range_direction_.ClearToEmpty();
}
inline const std::string& SideScanSource::horizontal_range_direction() const {
  // @@protoc_insertion_point(field_get:SideScanSource.horizontal_range_direction)
  return _internal_horizontal_range_direction();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_horizontal_range_direction(ArgT0&& arg0, ArgT... args) {
 
 _impl_.horizontal_range_direction_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.horizontal_range_direction)
}
inline std::string* SideScanSource::mutable_horizontal_range_direction() {
  std::string* _s = _internal_mutable_horizontal_range_direction();
  // @@protoc_insertion_point(field_mutable:SideScanSource.horizontal_range_direction)
  return _s;
}
inline const std::string& SideScanSource::_internal_horizontal_range_direction() const {
  return _impl_.horizontal_range_direction_.Get();
}
inline void SideScanSource::_internal_set_horizontal_range_direction(const std::string& value) {
  
  _impl_.horizontal_range_direction_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_horizontal_range_direction() {
  
  return _impl_.horizontal_range_direction_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_horizontal_range_direction() {
  // @@protoc_insertion_point(field_release:SideScanSource.horizontal_range_direction)
  return _impl_.horizontal_range_direction_.Release();
}
inline void SideScanSource::set_allocated_horizontal_range_direction(std::string* horizontal_range_direction) {
  if (horizontal_range_direction != nullptr) {
    
  } else {
    
  }
  _impl_.horizontal_range_direction_.SetAllocated(horizontal_range_direction, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horizontal_range_direction_.IsDefault()) {
    _impl_.horizontal_range_direction_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.horizontal_range_direction)
}

// string horizontal_range_value = 11;
inline void SideScanSource::clear_horizontal_range_value() {
  _impl_.horizontal_range_value_.ClearToEmpty();
}
inline const std::string& SideScanSource::horizontal_range_value() const {
  // @@protoc_insertion_point(field_get:SideScanSource.horizontal_range_value)
  return _internal_horizontal_range_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_horizontal_range_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.horizontal_range_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.horizontal_range_value)
}
inline std::string* SideScanSource::mutable_horizontal_range_value() {
  std::string* _s = _internal_mutable_horizontal_range_value();
  // @@protoc_insertion_point(field_mutable:SideScanSource.horizontal_range_value)
  return _s;
}
inline const std::string& SideScanSource::_internal_horizontal_range_value() const {
  return _impl_.horizontal_range_value_.Get();
}
inline void SideScanSource::_internal_set_horizontal_range_value(const std::string& value) {
  
  _impl_.horizontal_range_value_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_horizontal_range_value() {
  
  return _impl_.horizontal_range_value_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_horizontal_range_value() {
  // @@protoc_insertion_point(field_release:SideScanSource.horizontal_range_value)
  return _impl_.horizontal_range_value_.Release();
}
inline void SideScanSource::set_allocated_horizontal_range_value(std::string* horizontal_range_value) {
  if (horizontal_range_value != nullptr) {
    
  } else {
    
  }
  _impl_.horizontal_range_value_.SetAllocated(horizontal_range_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horizontal_range_value_.IsDefault()) {
    _impl_.horizontal_range_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.horizontal_range_value)
}

// float height_from_bottom = 12;
inline void SideScanSource::clear_height_from_bottom() {
  _impl_.height_from_bottom_ = 0;
}
inline float SideScanSource::_internal_height_from_bottom() const {
  return _impl_.height_from_bottom_;
}
inline float SideScanSource::height_from_bottom() const {
  // @@protoc_insertion_point(field_get:SideScanSource.height_from_bottom)
  return _internal_height_from_bottom();
}
inline void SideScanSource::_internal_set_height_from_bottom(float value) {
  
  _impl_.height_from_bottom_ = value;
}
inline void SideScanSource::set_height_from_bottom(float value) {
  _internal_set_height_from_bottom(value);
  // @@protoc_insertion_point(field_set:SideScanSource.height_from_bottom)
}

// float r_theta = 13;
inline void SideScanSource::clear_r_theta() {
  _impl_.r_theta_ = 0;
}
inline float SideScanSource::_internal_r_theta() const {
  return _impl_.r_theta_;
}
inline float SideScanSource::r_theta() const {
  // @@protoc_insertion_point(field_get:SideScanSource.r_theta)
  return _internal_r_theta();
}
inline void SideScanSource::_internal_set_r_theta(float value) {
  
  _impl_.r_theta_ = value;
}
inline void SideScanSource::set_r_theta(float value) {
  _internal_set_r_theta(value);
  // @@protoc_insertion_point(field_set:SideScanSource.r_theta)
}

// string side_scan_image_name = 14;
inline void SideScanSource::clear_side_scan_image_name() {
  _impl_.side_scan_image_name_.ClearToEmpty();
}
inline const std::string& SideScanSource::side_scan_image_name() const {
  // @@protoc_insertion_point(field_get:SideScanSource.side_scan_image_name)
  return _internal_side_scan_image_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_side_scan_image_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.side_scan_image_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.side_scan_image_name)
}
inline std::string* SideScanSource::mutable_side_scan_image_name() {
  std::string* _s = _internal_mutable_side_scan_image_name();
  // @@protoc_insertion_point(field_mutable:SideScanSource.side_scan_image_name)
  return _s;
}
inline const std::string& SideScanSource::_internal_side_scan_image_name() const {
  return _impl_.side_scan_image_name_.Get();
}
inline void SideScanSource::_internal_set_side_scan_image_name(const std::string& value) {
  
  _impl_.side_scan_image_name_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_side_scan_image_name() {
  
  return _impl_.side_scan_image_name_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_side_scan_image_name() {
  // @@protoc_insertion_point(field_release:SideScanSource.side_scan_image_name)
  return _impl_.side_scan_image_name_.Release();
}
inline void SideScanSource::set_allocated_side_scan_image_name(std::string* side_scan_image_name) {
  if (side_scan_image_name != nullptr) {
    
  } else {
    
  }
  _impl_.side_scan_image_name_.SetAllocated(side_scan_image_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.side_scan_image_name_.IsDefault()) {
    _impl_.side_scan_image_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.side_scan_image_name)
}

// double image_top_left_longitude = 15;
inline void SideScanSource::clear_image_top_left_longitude() {
  _impl_.image_top_left_longitude_ = 0;
}
inline double SideScanSource::_internal_image_top_left_longitude() const {
  return _impl_.image_top_left_longitude_;
}
inline double SideScanSource::image_top_left_longitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.image_top_left_longitude)
  return _internal_image_top_left_longitude();
}
inline void SideScanSource::_internal_set_image_top_left_longitude(double value) {
  
  _impl_.image_top_left_longitude_ = value;
}
inline void SideScanSource::set_image_top_left_longitude(double value) {
  _internal_set_image_top_left_longitude(value);
  // @@protoc_insertion_point(field_set:SideScanSource.image_top_left_longitude)
}

// double image_top_left_latitude = 16;
inline void SideScanSource::clear_image_top_left_latitude() {
  _impl_.image_top_left_latitude_ = 0;
}
inline double SideScanSource::_internal_image_top_left_latitude() const {
  return _impl_.image_top_left_latitude_;
}
inline double SideScanSource::image_top_left_latitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.image_top_left_latitude)
  return _internal_image_top_left_latitude();
}
inline void SideScanSource::_internal_set_image_top_left_latitude(double value) {
  
  _impl_.image_top_left_latitude_ = value;
}
inline void SideScanSource::set_image_top_left_latitude(double value) {
  _internal_set_image_top_left_latitude(value);
  // @@protoc_insertion_point(field_set:SideScanSource.image_top_left_latitude)
}

// double image_bottom_right_longitude = 17;
inline void SideScanSource::clear_image_bottom_right_longitude() {
  _impl_.image_bottom_right_longitude_ = 0;
}
inline double SideScanSource::_internal_image_bottom_right_longitude() const {
  return _impl_.image_bottom_right_longitude_;
}
inline double SideScanSource::image_bottom_right_longitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.image_bottom_right_longitude)
  return _internal_image_bottom_right_longitude();
}
inline void SideScanSource::_internal_set_image_bottom_right_longitude(double value) {
  
  _impl_.image_bottom_right_longitude_ = value;
}
inline void SideScanSource::set_image_bottom_right_longitude(double value) {
  _internal_set_image_bottom_right_longitude(value);
  // @@protoc_insertion_point(field_set:SideScanSource.image_bottom_right_longitude)
}

// double image_bottom_right_latitude = 18;
inline void SideScanSource::clear_image_bottom_right_latitude() {
  _impl_.image_bottom_right_latitude_ = 0;
}
inline double SideScanSource::_internal_image_bottom_right_latitude() const {
  return _impl_.image_bottom_right_latitude_;
}
inline double SideScanSource::image_bottom_right_latitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.image_bottom_right_latitude)
  return _internal_image_bottom_right_latitude();
}
inline void SideScanSource::_internal_set_image_bottom_right_latitude(double value) {
  
  _impl_.image_bottom_right_latitude_ = value;
}
inline void SideScanSource::set_image_bottom_right_latitude(double value) {
  _internal_set_image_bottom_right_latitude(value);
  // @@protoc_insertion_point(field_set:SideScanSource.image_bottom_right_latitude)
}

// uint32 image_total_byte = 19;
inline void SideScanSource::clear_image_total_byte() {
  _impl_.image_total_byte_ = 0u;
}
inline uint32_t SideScanSource::_internal_image_total_byte() const {
  return _impl_.image_total_byte_;
}
inline uint32_t SideScanSource::image_total_byte() const {
  // @@protoc_insertion_point(field_get:SideScanSource.image_total_byte)
  return _internal_image_total_byte();
}
inline void SideScanSource::_internal_set_image_total_byte(uint32_t value) {
  
  _impl_.image_total_byte_ = value;
}
inline void SideScanSource::set_image_total_byte(uint32_t value) {
  _internal_set_image_total_byte(value);
  // @@protoc_insertion_point(field_set:SideScanSource.image_total_byte)
}

// float along_track = 20;
inline void SideScanSource::clear_along_track() {
  _impl_.along_track_ = 0;
}
inline float SideScanSource::_internal_along_track() const {
  return _impl_.along_track_;
}
inline float SideScanSource::along_track() const {
  // @@protoc_insertion_point(field_get:SideScanSource.along_track)
  return _internal_along_track();
}
inline void SideScanSource::_internal_set_along_track(float value) {
  
  _impl_.along_track_ = value;
}
inline void SideScanSource::set_along_track(float value) {
  _internal_set_along_track(value);
  // @@protoc_insertion_point(field_set:SideScanSource.along_track)
}

// float across_track = 21;
inline void SideScanSource::clear_across_track() {
  _impl_.across_track_ = 0;
}
inline float SideScanSource::_internal_across_track() const {
  return _impl_.across_track_;
}
inline float SideScanSource::across_track() const {
  // @@protoc_insertion_point(field_get:SideScanSource.across_track)
  return _internal_across_track();
}
inline void SideScanSource::_internal_set_across_track(float value) {
  
  _impl_.across_track_ = value;
}
inline void SideScanSource::set_across_track(float value) {
  _internal_set_across_track(value);
  // @@protoc_insertion_point(field_set:SideScanSource.across_track)
}

// string remarks = 22;
inline void SideScanSource::clear_remarks() {
  _impl_.remarks_.ClearToEmpty();
}
inline const std::string& SideScanSource::remarks() const {
  // @@protoc_insertion_point(field_get:SideScanSource.remarks)
  return _internal_remarks();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_remarks(ArgT0&& arg0, ArgT... args) {
 
 _impl_.remarks_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.remarks)
}
inline std::string* SideScanSource::mutable_remarks() {
  std::string* _s = _internal_mutable_remarks();
  // @@protoc_insertion_point(field_mutable:SideScanSource.remarks)
  return _s;
}
inline const std::string& SideScanSource::_internal_remarks() const {
  return _impl_.remarks_.Get();
}
inline void SideScanSource::_internal_set_remarks(const std::string& value) {
  
  _impl_.remarks_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_remarks() {
  
  return _impl_.remarks_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_remarks() {
  // @@protoc_insertion_point(field_release:SideScanSource.remarks)
  return _impl_.remarks_.Release();
}
inline void SideScanSource::set_allocated_remarks(std::string* remarks) {
  if (remarks != nullptr) {
    
  } else {
    
  }
  _impl_.remarks_.SetAllocated(remarks, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.remarks_.IsDefault()) {
    _impl_.remarks_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.remarks)
}

// string suppose_size = 23;
inline void SideScanSource::clear_suppose_size() {
  _impl_.suppose_size_.ClearToEmpty();
}
inline const std::string& SideScanSource::suppose_size() const {
  // @@protoc_insertion_point(field_get:SideScanSource.suppose_size)
  return _internal_suppose_size();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_suppose_size(ArgT0&& arg0, ArgT... args) {
 
 _impl_.suppose_size_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.suppose_size)
}
inline std::string* SideScanSource::mutable_suppose_size() {
  std::string* _s = _internal_mutable_suppose_size();
  // @@protoc_insertion_point(field_mutable:SideScanSource.suppose_size)
  return _s;
}
inline const std::string& SideScanSource::_internal_suppose_size() const {
  return _impl_.suppose_size_.Get();
}
inline void SideScanSource::_internal_set_suppose_size(const std::string& value) {
  
  _impl_.suppose_size_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_suppose_size() {
  
  return _impl_.suppose_size_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_suppose_size() {
  // @@protoc_insertion_point(field_release:SideScanSource.suppose_size)
  return _impl_.suppose_size_.Release();
}
inline void SideScanSource::set_allocated_suppose_size(std::string* suppose_size) {
  if (suppose_size != nullptr) {
    
  } else {
    
  }
  _impl_.suppose_size_.SetAllocated(suppose_size, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.suppose_size_.IsDefault()) {
    _impl_.suppose_size_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.suppose_size)
}

// uint32 priority = 24;
inline void SideScanSource::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t SideScanSource::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t SideScanSource::priority() const {
  // @@protoc_insertion_point(field_get:SideScanSource.priority)
  return _internal_priority();
}
inline void SideScanSource::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void SideScanSource::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:SideScanSource.priority)
}

// string verify_auv_sss_image_paths = 25;
inline void SideScanSource::clear_verify_auv_sss_image_paths() {
  _impl_.verify_auv_sss_image_paths_.ClearToEmpty();
}
inline const std::string& SideScanSource::verify_auv_sss_image_paths() const {
  // @@protoc_insertion_point(field_get:SideScanSource.verify_auv_sss_image_paths)
  return _internal_verify_auv_sss_image_paths();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_verify_auv_sss_image_paths(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_auv_sss_image_paths_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.verify_auv_sss_image_paths)
}
inline std::string* SideScanSource::mutable_verify_auv_sss_image_paths() {
  std::string* _s = _internal_mutable_verify_auv_sss_image_paths();
  // @@protoc_insertion_point(field_mutable:SideScanSource.verify_auv_sss_image_paths)
  return _s;
}
inline const std::string& SideScanSource::_internal_verify_auv_sss_image_paths() const {
  return _impl_.verify_auv_sss_image_paths_.Get();
}
inline void SideScanSource::_internal_set_verify_auv_sss_image_paths(const std::string& value) {
  
  _impl_.verify_auv_sss_image_paths_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_verify_auv_sss_image_paths() {
  
  return _impl_.verify_auv_sss_image_paths_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_verify_auv_sss_image_paths() {
  // @@protoc_insertion_point(field_release:SideScanSource.verify_auv_sss_image_paths)
  return _impl_.verify_auv_sss_image_paths_.Release();
}
inline void SideScanSource::set_allocated_verify_auv_sss_image_paths(std::string* verify_auv_sss_image_paths) {
  if (verify_auv_sss_image_paths != nullptr) {
    
  } else {
    
  }
  _impl_.verify_auv_sss_image_paths_.SetAllocated(verify_auv_sss_image_paths, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_auv_sss_image_paths_.IsDefault()) {
    _impl_.verify_auv_sss_image_paths_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.verify_auv_sss_image_paths)
}

// string verify_image_paths = 26;
inline void SideScanSource::clear_verify_image_paths() {
  _impl_.verify_image_paths_.ClearToEmpty();
}
inline const std::string& SideScanSource::verify_image_paths() const {
  // @@protoc_insertion_point(field_get:SideScanSource.verify_image_paths)
  return _internal_verify_image_paths();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_verify_image_paths(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_image_paths_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.verify_image_paths)
}
inline std::string* SideScanSource::mutable_verify_image_paths() {
  std::string* _s = _internal_mutable_verify_image_paths();
  // @@protoc_insertion_point(field_mutable:SideScanSource.verify_image_paths)
  return _s;
}
inline const std::string& SideScanSource::_internal_verify_image_paths() const {
  return _impl_.verify_image_paths_.Get();
}
inline void SideScanSource::_internal_set_verify_image_paths(const std::string& value) {
  
  _impl_.verify_image_paths_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_verify_image_paths() {
  
  return _impl_.verify_image_paths_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_verify_image_paths() {
  // @@protoc_insertion_point(field_release:SideScanSource.verify_image_paths)
  return _impl_.verify_image_paths_.Release();
}
inline void SideScanSource::set_allocated_verify_image_paths(std::string* verify_image_paths) {
  if (verify_image_paths != nullptr) {
    
  } else {
    
  }
  _impl_.verify_image_paths_.SetAllocated(verify_image_paths, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_image_paths_.IsDefault()) {
    _impl_.verify_image_paths_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.verify_image_paths)
}

// string image_description = 27;
inline void SideScanSource::clear_image_description() {
  _impl_.image_description_.ClearToEmpty();
}
inline const std::string& SideScanSource::image_description() const {
  // @@protoc_insertion_point(field_get:SideScanSource.image_description)
  return _internal_image_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_image_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.image_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.image_description)
}
inline std::string* SideScanSource::mutable_image_description() {
  std::string* _s = _internal_mutable_image_description();
  // @@protoc_insertion_point(field_mutable:SideScanSource.image_description)
  return _s;
}
inline const std::string& SideScanSource::_internal_image_description() const {
  return _impl_.image_description_.Get();
}
inline void SideScanSource::_internal_set_image_description(const std::string& value) {
  
  _impl_.image_description_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_image_description() {
  
  return _impl_.image_description_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_image_description() {
  // @@protoc_insertion_point(field_release:SideScanSource.image_description)
  return _impl_.image_description_.Release();
}
inline void SideScanSource::set_allocated_image_description(std::string* image_description) {
  if (image_description != nullptr) {
    
  } else {
    
  }
  _impl_.image_description_.SetAllocated(image_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_description_.IsDefault()) {
    _impl_.image_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.image_description)
}

// string target_longitude = 28;
inline void SideScanSource::clear_target_longitude() {
  _impl_.target_longitude_.ClearToEmpty();
}
inline const std::string& SideScanSource::target_longitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.target_longitude)
  return _internal_target_longitude();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_target_longitude(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_longitude_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.target_longitude)
}
inline std::string* SideScanSource::mutable_target_longitude() {
  std::string* _s = _internal_mutable_target_longitude();
  // @@protoc_insertion_point(field_mutable:SideScanSource.target_longitude)
  return _s;
}
inline const std::string& SideScanSource::_internal_target_longitude() const {
  return _impl_.target_longitude_.Get();
}
inline void SideScanSource::_internal_set_target_longitude(const std::string& value) {
  
  _impl_.target_longitude_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_target_longitude() {
  
  return _impl_.target_longitude_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_target_longitude() {
  // @@protoc_insertion_point(field_release:SideScanSource.target_longitude)
  return _impl_.target_longitude_.Release();
}
inline void SideScanSource::set_allocated_target_longitude(std::string* target_longitude) {
  if (target_longitude != nullptr) {
    
  } else {
    
  }
  _impl_.target_longitude_.SetAllocated(target_longitude, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_longitude_.IsDefault()) {
    _impl_.target_longitude_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.target_longitude)
}

// string target_latitude = 29;
inline void SideScanSource::clear_target_latitude() {
  _impl_.target_latitude_.ClearToEmpty();
}
inline const std::string& SideScanSource::target_latitude() const {
  // @@protoc_insertion_point(field_get:SideScanSource.target_latitude)
  return _internal_target_latitude();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_target_latitude(ArgT0&& arg0, ArgT... args) {
 
 _impl_.target_latitude_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.target_latitude)
}
inline std::string* SideScanSource::mutable_target_latitude() {
  std::string* _s = _internal_mutable_target_latitude();
  // @@protoc_insertion_point(field_mutable:SideScanSource.target_latitude)
  return _s;
}
inline const std::string& SideScanSource::_internal_target_latitude() const {
  return _impl_.target_latitude_.Get();
}
inline void SideScanSource::_internal_set_target_latitude(const std::string& value) {
  
  _impl_.target_latitude_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_target_latitude() {
  
  return _impl_.target_latitude_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_target_latitude() {
  // @@protoc_insertion_point(field_release:SideScanSource.target_latitude)
  return _impl_.target_latitude_.Release();
}
inline void SideScanSource::set_allocated_target_latitude(std::string* target_latitude) {
  if (target_latitude != nullptr) {
    
  } else {
    
  }
  _impl_.target_latitude_.SetAllocated(target_latitude, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.target_latitude_.IsDefault()) {
    _impl_.target_latitude_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.target_latitude)
}

// string position_error = 30;
inline void SideScanSource::clear_position_error() {
  _impl_.position_error_.ClearToEmpty();
}
inline const std::string& SideScanSource::position_error() const {
  // @@protoc_insertion_point(field_get:SideScanSource.position_error)
  return _internal_position_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_position_error(ArgT0&& arg0, ArgT... args) {
 
 _impl_.position_error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.position_error)
}
inline std::string* SideScanSource::mutable_position_error() {
  std::string* _s = _internal_mutable_position_error();
  // @@protoc_insertion_point(field_mutable:SideScanSource.position_error)
  return _s;
}
inline const std::string& SideScanSource::_internal_position_error() const {
  return _impl_.position_error_.Get();
}
inline void SideScanSource::_internal_set_position_error(const std::string& value) {
  
  _impl_.position_error_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_position_error() {
  
  return _impl_.position_error_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_position_error() {
  // @@protoc_insertion_point(field_release:SideScanSource.position_error)
  return _impl_.position_error_.Release();
}
inline void SideScanSource::set_allocated_position_error(std::string* position_error) {
  if (position_error != nullptr) {
    
  } else {
    
  }
  _impl_.position_error_.SetAllocated(position_error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.position_error_.IsDefault()) {
    _impl_.position_error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.position_error)
}

// string verify_cruise_number = 31;
inline void SideScanSource::clear_verify_cruise_number() {
  _impl_.verify_cruise_number_.ClearToEmpty();
}
inline const std::string& SideScanSource::verify_cruise_number() const {
  // @@protoc_insertion_point(field_get:SideScanSource.verify_cruise_number)
  return _internal_verify_cruise_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_verify_cruise_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_cruise_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.verify_cruise_number)
}
inline std::string* SideScanSource::mutable_verify_cruise_number() {
  std::string* _s = _internal_mutable_verify_cruise_number();
  // @@protoc_insertion_point(field_mutable:SideScanSource.verify_cruise_number)
  return _s;
}
inline const std::string& SideScanSource::_internal_verify_cruise_number() const {
  return _impl_.verify_cruise_number_.Get();
}
inline void SideScanSource::_internal_set_verify_cruise_number(const std::string& value) {
  
  _impl_.verify_cruise_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_verify_cruise_number() {
  
  return _impl_.verify_cruise_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_verify_cruise_number() {
  // @@protoc_insertion_point(field_release:SideScanSource.verify_cruise_number)
  return _impl_.verify_cruise_number_.Release();
}
inline void SideScanSource::set_allocated_verify_cruise_number(std::string* verify_cruise_number) {
  if (verify_cruise_number != nullptr) {
    
  } else {
    
  }
  _impl_.verify_cruise_number_.SetAllocated(verify_cruise_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_cruise_number_.IsDefault()) {
    _impl_.verify_cruise_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.verify_cruise_number)
}

// string verify_dive_number = 32;
inline void SideScanSource::clear_verify_dive_number() {
  _impl_.verify_dive_number_.ClearToEmpty();
}
inline const std::string& SideScanSource::verify_dive_number() const {
  // @@protoc_insertion_point(field_get:SideScanSource.verify_dive_number)
  return _internal_verify_dive_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_verify_dive_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_dive_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.verify_dive_number)
}
inline std::string* SideScanSource::mutable_verify_dive_number() {
  std::string* _s = _internal_mutable_verify_dive_number();
  // @@protoc_insertion_point(field_mutable:SideScanSource.verify_dive_number)
  return _s;
}
inline const std::string& SideScanSource::_internal_verify_dive_number() const {
  return _impl_.verify_dive_number_.Get();
}
inline void SideScanSource::_internal_set_verify_dive_number(const std::string& value) {
  
  _impl_.verify_dive_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_verify_dive_number() {
  
  return _impl_.verify_dive_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_verify_dive_number() {
  // @@protoc_insertion_point(field_release:SideScanSource.verify_dive_number)
  return _impl_.verify_dive_number_.Release();
}
inline void SideScanSource::set_allocated_verify_dive_number(std::string* verify_dive_number) {
  if (verify_dive_number != nullptr) {
    
  } else {
    
  }
  _impl_.verify_dive_number_.SetAllocated(verify_dive_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_dive_number_.IsDefault()) {
    _impl_.verify_dive_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.verify_dive_number)
}

// string verify_time = 33;
inline void SideScanSource::clear_verify_time() {
  _impl_.verify_time_.ClearToEmpty();
}
inline const std::string& SideScanSource::verify_time() const {
  // @@protoc_insertion_point(field_get:SideScanSource.verify_time)
  return _internal_verify_time();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SideScanSource::set_verify_time(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_time_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SideScanSource.verify_time)
}
inline std::string* SideScanSource::mutable_verify_time() {
  std::string* _s = _internal_mutable_verify_time();
  // @@protoc_insertion_point(field_mutable:SideScanSource.verify_time)
  return _s;
}
inline const std::string& SideScanSource::_internal_verify_time() const {
  return _impl_.verify_time_.Get();
}
inline void SideScanSource::_internal_set_verify_time(const std::string& value) {
  
  _impl_.verify_time_.Set(value, GetArenaForAllocation());
}
inline std::string* SideScanSource::_internal_mutable_verify_time() {
  
  return _impl_.verify_time_.Mutable(GetArenaForAllocation());
}
inline std::string* SideScanSource::release_verify_time() {
  // @@protoc_insertion_point(field_release:SideScanSource.verify_time)
  return _impl_.verify_time_.Release();
}
inline void SideScanSource::set_allocated_verify_time(std::string* verify_time) {
  if (verify_time != nullptr) {
    
  } else {
    
  }
  _impl_.verify_time_.SetAllocated(verify_time, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_time_.IsDefault()) {
    _impl_.verify_time_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SideScanSource.verify_time)
}

// bool verify_flag = 34;
inline void SideScanSource::clear_verify_flag() {
  _impl_.verify_flag_ = false;
}
inline bool SideScanSource::_internal_verify_flag() const {
  return _impl_.verify_flag_;
}
inline bool SideScanSource::verify_flag() const {
  // @@protoc_insertion_point(field_get:SideScanSource.verify_flag)
  return _internal_verify_flag();
}
inline void SideScanSource::_internal_set_verify_flag(bool value) {
  
  _impl_.verify_flag_ = value;
}
inline void SideScanSource::set_verify_flag(bool value) {
  _internal_set_verify_flag(value);
  // @@protoc_insertion_point(field_set:SideScanSource.verify_flag)
}

// uint32 status_flag = 35;
inline void SideScanSource::clear_status_flag() {
  _impl_.status_flag_ = 0u;
}
inline uint32_t SideScanSource::_internal_status_flag() const {
  return _impl_.status_flag_;
}
inline uint32_t SideScanSource::status_flag() const {
  // @@protoc_insertion_point(field_get:SideScanSource.status_flag)
  return _internal_status_flag();
}
inline void SideScanSource::_internal_set_status_flag(uint32_t value) {
  
  _impl_.status_flag_ = value;
}
inline void SideScanSource::set_status_flag(uint32_t value) {
  _internal_set_status_flag(value);
  // @@protoc_insertion_point(field_set:SideScanSource.status_flag)
}

// -------------------------------------------------------------------

// SideScanSourceList

// repeated .SideScanSource list = 1;
inline int SideScanSourceList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int SideScanSourceList::list_size() const {
  return _internal_list_size();
}
inline void SideScanSourceList::clear_list() {
  _impl_.list_.Clear();
}
inline ::SideScanSource* SideScanSourceList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:SideScanSourceList.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SideScanSource >*
SideScanSourceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:SideScanSourceList.list)
  return &_impl_.list_;
}
inline const ::SideScanSource& SideScanSourceList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::SideScanSource& SideScanSourceList::list(int index) const {
  // @@protoc_insertion_point(field_get:SideScanSourceList.list)
  return _internal_list(index);
}
inline ::SideScanSource* SideScanSourceList::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::SideScanSource* SideScanSourceList::add_list() {
  ::SideScanSource* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:SideScanSourceList.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SideScanSource >&
SideScanSourceList::list() const {
  // @@protoc_insertion_point(field_list:SideScanSourceList.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// StatusResponse

// bool status = 1;
inline void StatusResponse::clear_status() {
  _impl_.status_ = false;
}
inline bool StatusResponse::_internal_status() const {
  return _impl_.status_;
}
inline bool StatusResponse::status() const {
  // @@protoc_insertion_point(field_get:StatusResponse.status)
  return _internal_status();
}
inline void StatusResponse::_internal_set_status(bool value) {
  
  _impl_.status_ = value;
}
inline void StatusResponse::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:StatusResponse.status)
}

// string message = 2;
inline void StatusResponse::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& StatusResponse::message() const {
  // @@protoc_insertion_point(field_get:StatusResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:StatusResponse.message)
}
inline std::string* StatusResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:StatusResponse.message)
  return _s;
}
inline const std::string& StatusResponse::_internal_message() const {
  return _impl_.message_.Get();
}
inline void StatusResponse::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* StatusResponse::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* StatusResponse::release_message() {
  // @@protoc_insertion_point(field_release:StatusResponse.message)
  return _impl_.message_.Release();
}
inline void StatusResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:StatusResponse.message)
}

// -------------------------------------------------------------------

// CruiseRouteSource

// string cruise = 1;
inline void CruiseRouteSource::clear_cruise() {
  _impl_.cruise_.ClearToEmpty();
}
inline const std::string& CruiseRouteSource::cruise() const {
  // @@protoc_insertion_point(field_get:CruiseRouteSource.cruise)
  return _internal_cruise();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CruiseRouteSource::set_cruise(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CruiseRouteSource.cruise)
}
inline std::string* CruiseRouteSource::mutable_cruise() {
  std::string* _s = _internal_mutable_cruise();
  // @@protoc_insertion_point(field_mutable:CruiseRouteSource.cruise)
  return _s;
}
inline const std::string& CruiseRouteSource::_internal_cruise() const {
  return _impl_.cruise_.Get();
}
inline void CruiseRouteSource::_internal_set_cruise(const std::string& value) {
  
  _impl_.cruise_.Set(value, GetArenaForAllocation());
}
inline std::string* CruiseRouteSource::_internal_mutable_cruise() {
  
  return _impl_.cruise_.Mutable(GetArenaForAllocation());
}
inline std::string* CruiseRouteSource::release_cruise() {
  // @@protoc_insertion_point(field_release:CruiseRouteSource.cruise)
  return _impl_.cruise_.Release();
}
inline void CruiseRouteSource::set_allocated_cruise(std::string* cruise) {
  if (cruise != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_.SetAllocated(cruise, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_.IsDefault()) {
    _impl_.cruise_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CruiseRouteSource.cruise)
}

// string type = 2;
inline void CruiseRouteSource::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& CruiseRouteSource::type() const {
  // @@protoc_insertion_point(field_get:CruiseRouteSource.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CruiseRouteSource::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CruiseRouteSource.type)
}
inline std::string* CruiseRouteSource::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:CruiseRouteSource.type)
  return _s;
}
inline const std::string& CruiseRouteSource::_internal_type() const {
  return _impl_.type_.Get();
}
inline void CruiseRouteSource::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* CruiseRouteSource::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* CruiseRouteSource::release_type() {
  // @@protoc_insertion_point(field_release:CruiseRouteSource.type)
  return _impl_.type_.Release();
}
inline void CruiseRouteSource::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CruiseRouteSource.type)
}

// string name = 3;
inline void CruiseRouteSource::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CruiseRouteSource::name() const {
  // @@protoc_insertion_point(field_get:CruiseRouteSource.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CruiseRouteSource::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:CruiseRouteSource.name)
}
inline std::string* CruiseRouteSource::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:CruiseRouteSource.name)
  return _s;
}
inline const std::string& CruiseRouteSource::_internal_name() const {
  return _impl_.name_.Get();
}
inline void CruiseRouteSource::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* CruiseRouteSource::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* CruiseRouteSource::release_name() {
  // @@protoc_insertion_point(field_release:CruiseRouteSource.name)
  return _impl_.name_.Release();
}
inline void CruiseRouteSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:CruiseRouteSource.name)
}

// uint32 status_flag = 29;
inline void CruiseRouteSource::clear_status_flag() {
  _impl_.status_flag_ = 0u;
}
inline uint32_t CruiseRouteSource::_internal_status_flag() const {
  return _impl_.status_flag_;
}
inline uint32_t CruiseRouteSource::status_flag() const {
  // @@protoc_insertion_point(field_get:CruiseRouteSource.status_flag)
  return _internal_status_flag();
}
inline void CruiseRouteSource::_internal_set_status_flag(uint32_t value) {
  
  _impl_.status_flag_ = value;
}
inline void CruiseRouteSource::set_status_flag(uint32_t value) {
  _internal_set_status_flag(value);
  // @@protoc_insertion_point(field_set:CruiseRouteSource.status_flag)
}

// -------------------------------------------------------------------

// CruiseRouteSourceList

// repeated .CruiseRouteSource list = 1;
inline int CruiseRouteSourceList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int CruiseRouteSourceList::list_size() const {
  return _internal_list_size();
}
inline void CruiseRouteSourceList::clear_list() {
  _impl_.list_.Clear();
}
inline ::CruiseRouteSource* CruiseRouteSourceList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:CruiseRouteSourceList.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CruiseRouteSource >*
CruiseRouteSourceList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:CruiseRouteSourceList.list)
  return &_impl_.list_;
}
inline const ::CruiseRouteSource& CruiseRouteSourceList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::CruiseRouteSource& CruiseRouteSourceList::list(int index) const {
  // @@protoc_insertion_point(field_get:CruiseRouteSourceList.list)
  return _internal_list(index);
}
inline ::CruiseRouteSource* CruiseRouteSourceList::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::CruiseRouteSource* CruiseRouteSourceList::add_list() {
  ::CruiseRouteSource* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:CruiseRouteSourceList.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::CruiseRouteSource >&
CruiseRouteSourceList::list() const {
  // @@protoc_insertion_point(field_list:CruiseRouteSourceList.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// SearchFilterParamter

// string cruise_year = 1;
inline void SearchFilterParamter::clear_cruise_year() {
  _impl_.cruise_year_.ClearToEmpty();
}
inline const std::string& SearchFilterParamter::cruise_year() const {
  // @@protoc_insertion_point(field_get:SearchFilterParamter.cruise_year)
  return _internal_cruise_year();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchFilterParamter::set_cruise_year(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_year_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchFilterParamter.cruise_year)
}
inline std::string* SearchFilterParamter::mutable_cruise_year() {
  std::string* _s = _internal_mutable_cruise_year();
  // @@protoc_insertion_point(field_mutable:SearchFilterParamter.cruise_year)
  return _s;
}
inline const std::string& SearchFilterParamter::_internal_cruise_year() const {
  return _impl_.cruise_year_.Get();
}
inline void SearchFilterParamter::_internal_set_cruise_year(const std::string& value) {
  
  _impl_.cruise_year_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::_internal_mutable_cruise_year() {
  
  return _impl_.cruise_year_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::release_cruise_year() {
  // @@protoc_insertion_point(field_release:SearchFilterParamter.cruise_year)
  return _impl_.cruise_year_.Release();
}
inline void SearchFilterParamter::set_allocated_cruise_year(std::string* cruise_year) {
  if (cruise_year != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_year_.SetAllocated(cruise_year, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_year_.IsDefault()) {
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchFilterParamter.cruise_year)
}

// string cruise_number = 2;
inline void SearchFilterParamter::clear_cruise_number() {
  _impl_.cruise_number_.ClearToEmpty();
}
inline const std::string& SearchFilterParamter::cruise_number() const {
  // @@protoc_insertion_point(field_get:SearchFilterParamter.cruise_number)
  return _internal_cruise_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchFilterParamter::set_cruise_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchFilterParamter.cruise_number)
}
inline std::string* SearchFilterParamter::mutable_cruise_number() {
  std::string* _s = _internal_mutable_cruise_number();
  // @@protoc_insertion_point(field_mutable:SearchFilterParamter.cruise_number)
  return _s;
}
inline const std::string& SearchFilterParamter::_internal_cruise_number() const {
  return _impl_.cruise_number_.Get();
}
inline void SearchFilterParamter::_internal_set_cruise_number(const std::string& value) {
  
  _impl_.cruise_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::_internal_mutable_cruise_number() {
  
  return _impl_.cruise_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::release_cruise_number() {
  // @@protoc_insertion_point(field_release:SearchFilterParamter.cruise_number)
  return _impl_.cruise_number_.Release();
}
inline void SearchFilterParamter::set_allocated_cruise_number(std::string* cruise_number) {
  if (cruise_number != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_number_.SetAllocated(cruise_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_number_.IsDefault()) {
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchFilterParamter.cruise_number)
}

// string dive_number = 3;
inline void SearchFilterParamter::clear_dive_number() {
  _impl_.dive_number_.ClearToEmpty();
}
inline const std::string& SearchFilterParamter::dive_number() const {
  // @@protoc_insertion_point(field_get:SearchFilterParamter.dive_number)
  return _internal_dive_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchFilterParamter::set_dive_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dive_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchFilterParamter.dive_number)
}
inline std::string* SearchFilterParamter::mutable_dive_number() {
  std::string* _s = _internal_mutable_dive_number();
  // @@protoc_insertion_point(field_mutable:SearchFilterParamter.dive_number)
  return _s;
}
inline const std::string& SearchFilterParamter::_internal_dive_number() const {
  return _impl_.dive_number_.Get();
}
inline void SearchFilterParamter::_internal_set_dive_number(const std::string& value) {
  
  _impl_.dive_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::_internal_mutable_dive_number() {
  
  return _impl_.dive_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::release_dive_number() {
  // @@protoc_insertion_point(field_release:SearchFilterParamter.dive_number)
  return _impl_.dive_number_.Release();
}
inline void SearchFilterParamter::set_allocated_dive_number(std::string* dive_number) {
  if (dive_number != nullptr) {
    
  } else {
    
  }
  _impl_.dive_number_.SetAllocated(dive_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dive_number_.IsDefault()) {
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchFilterParamter.dive_number)
}

// string verify_dive_number = 4;
inline void SearchFilterParamter::clear_verify_dive_number() {
  _impl_.verify_dive_number_.ClearToEmpty();
}
inline const std::string& SearchFilterParamter::verify_dive_number() const {
  // @@protoc_insertion_point(field_get:SearchFilterParamter.verify_dive_number)
  return _internal_verify_dive_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchFilterParamter::set_verify_dive_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_dive_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchFilterParamter.verify_dive_number)
}
inline std::string* SearchFilterParamter::mutable_verify_dive_number() {
  std::string* _s = _internal_mutable_verify_dive_number();
  // @@protoc_insertion_point(field_mutable:SearchFilterParamter.verify_dive_number)
  return _s;
}
inline const std::string& SearchFilterParamter::_internal_verify_dive_number() const {
  return _impl_.verify_dive_number_.Get();
}
inline void SearchFilterParamter::_internal_set_verify_dive_number(const std::string& value) {
  
  _impl_.verify_dive_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::_internal_mutable_verify_dive_number() {
  
  return _impl_.verify_dive_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchFilterParamter::release_verify_dive_number() {
  // @@protoc_insertion_point(field_release:SearchFilterParamter.verify_dive_number)
  return _impl_.verify_dive_number_.Release();
}
inline void SearchFilterParamter::set_allocated_verify_dive_number(std::string* verify_dive_number) {
  if (verify_dive_number != nullptr) {
    
  } else {
    
  }
  _impl_.verify_dive_number_.SetAllocated(verify_dive_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_dive_number_.IsDefault()) {
    _impl_.verify_dive_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchFilterParamter.verify_dive_number)
}

// -------------------------------------------------------------------

// SearchFilterParamterList

// repeated .SearchFilterParamter list = 1;
inline int SearchFilterParamterList::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int SearchFilterParamterList::list_size() const {
  return _internal_list_size();
}
inline void SearchFilterParamterList::clear_list() {
  _impl_.list_.Clear();
}
inline ::SearchFilterParamter* SearchFilterParamterList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:SearchFilterParamterList.list)
  return _impl_.list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchFilterParamter >*
SearchFilterParamterList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:SearchFilterParamterList.list)
  return &_impl_.list_;
}
inline const ::SearchFilterParamter& SearchFilterParamterList::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline const ::SearchFilterParamter& SearchFilterParamterList::list(int index) const {
  // @@protoc_insertion_point(field_get:SearchFilterParamterList.list)
  return _internal_list(index);
}
inline ::SearchFilterParamter* SearchFilterParamterList::_internal_add_list() {
  return _impl_.list_.Add();
}
inline ::SearchFilterParamter* SearchFilterParamterList::add_list() {
  ::SearchFilterParamter* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:SearchFilterParamterList.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SearchFilterParamter >&
SearchFilterParamterList::list() const {
  // @@protoc_insertion_point(field_list:SearchFilterParamterList.list)
  return _impl_.list_;
}

// -------------------------------------------------------------------

// SearchParameter

// string cruise_year = 1;
inline void SearchParameter::clear_cruise_year() {
  _impl_.cruise_year_.ClearToEmpty();
}
inline const std::string& SearchParameter::cruise_year() const {
  // @@protoc_insertion_point(field_get:SearchParameter.cruise_year)
  return _internal_cruise_year();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchParameter::set_cruise_year(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_year_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchParameter.cruise_year)
}
inline std::string* SearchParameter::mutable_cruise_year() {
  std::string* _s = _internal_mutable_cruise_year();
  // @@protoc_insertion_point(field_mutable:SearchParameter.cruise_year)
  return _s;
}
inline const std::string& SearchParameter::_internal_cruise_year() const {
  return _impl_.cruise_year_.Get();
}
inline void SearchParameter::_internal_set_cruise_year(const std::string& value) {
  
  _impl_.cruise_year_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchParameter::_internal_mutable_cruise_year() {
  
  return _impl_.cruise_year_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchParameter::release_cruise_year() {
  // @@protoc_insertion_point(field_release:SearchParameter.cruise_year)
  return _impl_.cruise_year_.Release();
}
inline void SearchParameter::set_allocated_cruise_year(std::string* cruise_year) {
  if (cruise_year != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_year_.SetAllocated(cruise_year, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_year_.IsDefault()) {
    _impl_.cruise_year_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchParameter.cruise_year)
}

// string cruise_number = 2;
inline void SearchParameter::clear_cruise_number() {
  _impl_.cruise_number_.ClearToEmpty();
}
inline const std::string& SearchParameter::cruise_number() const {
  // @@protoc_insertion_point(field_get:SearchParameter.cruise_number)
  return _internal_cruise_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchParameter::set_cruise_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.cruise_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchParameter.cruise_number)
}
inline std::string* SearchParameter::mutable_cruise_number() {
  std::string* _s = _internal_mutable_cruise_number();
  // @@protoc_insertion_point(field_mutable:SearchParameter.cruise_number)
  return _s;
}
inline const std::string& SearchParameter::_internal_cruise_number() const {
  return _impl_.cruise_number_.Get();
}
inline void SearchParameter::_internal_set_cruise_number(const std::string& value) {
  
  _impl_.cruise_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchParameter::_internal_mutable_cruise_number() {
  
  return _impl_.cruise_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchParameter::release_cruise_number() {
  // @@protoc_insertion_point(field_release:SearchParameter.cruise_number)
  return _impl_.cruise_number_.Release();
}
inline void SearchParameter::set_allocated_cruise_number(std::string* cruise_number) {
  if (cruise_number != nullptr) {
    
  } else {
    
  }
  _impl_.cruise_number_.SetAllocated(cruise_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.cruise_number_.IsDefault()) {
    _impl_.cruise_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchParameter.cruise_number)
}

// string dive_number = 3;
inline void SearchParameter::clear_dive_number() {
  _impl_.dive_number_.ClearToEmpty();
}
inline const std::string& SearchParameter::dive_number() const {
  // @@protoc_insertion_point(field_get:SearchParameter.dive_number)
  return _internal_dive_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchParameter::set_dive_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dive_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchParameter.dive_number)
}
inline std::string* SearchParameter::mutable_dive_number() {
  std::string* _s = _internal_mutable_dive_number();
  // @@protoc_insertion_point(field_mutable:SearchParameter.dive_number)
  return _s;
}
inline const std::string& SearchParameter::_internal_dive_number() const {
  return _impl_.dive_number_.Get();
}
inline void SearchParameter::_internal_set_dive_number(const std::string& value) {
  
  _impl_.dive_number_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchParameter::_internal_mutable_dive_number() {
  
  return _impl_.dive_number_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchParameter::release_dive_number() {
  // @@protoc_insertion_point(field_release:SearchParameter.dive_number)
  return _impl_.dive_number_.Release();
}
inline void SearchParameter::set_allocated_dive_number(std::string* dive_number) {
  if (dive_number != nullptr) {
    
  } else {
    
  }
  _impl_.dive_number_.SetAllocated(dive_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dive_number_.IsDefault()) {
    _impl_.dive_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchParameter.dive_number)
}

// repeated string verify_dive_number = 4;
inline int SearchParameter::_internal_verify_dive_number_size() const {
  return _impl_.verify_dive_number_.size();
}
inline int SearchParameter::verify_dive_number_size() const {
  return _internal_verify_dive_number_size();
}
inline void SearchParameter::clear_verify_dive_number() {
  _impl_.verify_dive_number_.Clear();
}
inline std::string* SearchParameter::add_verify_dive_number() {
  std::string* _s = _internal_add_verify_dive_number();
  // @@protoc_insertion_point(field_add_mutable:SearchParameter.verify_dive_number)
  return _s;
}
inline const std::string& SearchParameter::_internal_verify_dive_number(int index) const {
  return _impl_.verify_dive_number_.Get(index);
}
inline const std::string& SearchParameter::verify_dive_number(int index) const {
  // @@protoc_insertion_point(field_get:SearchParameter.verify_dive_number)
  return _internal_verify_dive_number(index);
}
inline std::string* SearchParameter::mutable_verify_dive_number(int index) {
  // @@protoc_insertion_point(field_mutable:SearchParameter.verify_dive_number)
  return _impl_.verify_dive_number_.Mutable(index);
}
inline void SearchParameter::set_verify_dive_number(int index, const std::string& value) {
  _impl_.verify_dive_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:SearchParameter.verify_dive_number)
}
inline void SearchParameter::set_verify_dive_number(int index, std::string&& value) {
  _impl_.verify_dive_number_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:SearchParameter.verify_dive_number)
}
inline void SearchParameter::set_verify_dive_number(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.verify_dive_number_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchParameter.verify_dive_number)
}
inline void SearchParameter::set_verify_dive_number(int index, const char* value, size_t size) {
  _impl_.verify_dive_number_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchParameter.verify_dive_number)
}
inline std::string* SearchParameter::_internal_add_verify_dive_number() {
  return _impl_.verify_dive_number_.Add();
}
inline void SearchParameter::add_verify_dive_number(const std::string& value) {
  _impl_.verify_dive_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchParameter.verify_dive_number)
}
inline void SearchParameter::add_verify_dive_number(std::string&& value) {
  _impl_.verify_dive_number_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchParameter.verify_dive_number)
}
inline void SearchParameter::add_verify_dive_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.verify_dive_number_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchParameter.verify_dive_number)
}
inline void SearchParameter::add_verify_dive_number(const char* value, size_t size) {
  _impl_.verify_dive_number_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchParameter.verify_dive_number)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchParameter::verify_dive_number() const {
  // @@protoc_insertion_point(field_list:SearchParameter.verify_dive_number)
  return _impl_.verify_dive_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchParameter::mutable_verify_dive_number() {
  // @@protoc_insertion_point(field_mutable_list:SearchParameter.verify_dive_number)
  return &_impl_.verify_dive_number_;
}

// string priority = 5;
inline void SearchParameter::clear_priority() {
  _impl_.priority_.ClearToEmpty();
}
inline const std::string& SearchParameter::priority() const {
  // @@protoc_insertion_point(field_get:SearchParameter.priority)
  return _internal_priority();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchParameter::set_priority(ArgT0&& arg0, ArgT... args) {
 
 _impl_.priority_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchParameter.priority)
}
inline std::string* SearchParameter::mutable_priority() {
  std::string* _s = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:SearchParameter.priority)
  return _s;
}
inline const std::string& SearchParameter::_internal_priority() const {
  return _impl_.priority_.Get();
}
inline void SearchParameter::_internal_set_priority(const std::string& value) {
  
  _impl_.priority_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchParameter::_internal_mutable_priority() {
  
  return _impl_.priority_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchParameter::release_priority() {
  // @@protoc_insertion_point(field_release:SearchParameter.priority)
  return _impl_.priority_.Release();
}
inline void SearchParameter::set_allocated_priority(std::string* priority) {
  if (priority != nullptr) {
    
  } else {
    
  }
  _impl_.priority_.SetAllocated(priority, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.priority_.IsDefault()) {
    _impl_.priority_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchParameter.priority)
}

// string verify_flag = 6;
inline void SearchParameter::clear_verify_flag() {
  _impl_.verify_flag_.ClearToEmpty();
}
inline const std::string& SearchParameter::verify_flag() const {
  // @@protoc_insertion_point(field_get:SearchParameter.verify_flag)
  return _internal_verify_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SearchParameter::set_verify_flag(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verify_flag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:SearchParameter.verify_flag)
}
inline std::string* SearchParameter::mutable_verify_flag() {
  std::string* _s = _internal_mutable_verify_flag();
  // @@protoc_insertion_point(field_mutable:SearchParameter.verify_flag)
  return _s;
}
inline const std::string& SearchParameter::_internal_verify_flag() const {
  return _impl_.verify_flag_.Get();
}
inline void SearchParameter::_internal_set_verify_flag(const std::string& value) {
  
  _impl_.verify_flag_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchParameter::_internal_mutable_verify_flag() {
  
  return _impl_.verify_flag_.Mutable(GetArenaForAllocation());
}
inline std::string* SearchParameter::release_verify_flag() {
  // @@protoc_insertion_point(field_release:SearchParameter.verify_flag)
  return _impl_.verify_flag_.Release();
}
inline void SearchParameter::set_allocated_verify_flag(std::string* verify_flag) {
  if (verify_flag != nullptr) {
    
  } else {
    
  }
  _impl_.verify_flag_.SetAllocated(verify_flag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verify_flag_.IsDefault()) {
    _impl_.verify_flag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:SearchParameter.verify_flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sidescansource_2eproto
